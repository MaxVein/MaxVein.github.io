{"version":3,"sources":["features/admin/orders/Orders.module.css","features/admin/defects/DeleteDialog/DeleteDialog.module.css","common/components/DeleteDialog/DeleteDialog.module.css","common/components/Loader/Loader.module.css","features/admin/defects/table/DefectsTable.module.css","features/admin/users/table/UsersTable.module.css","environments/environment.tsx","common/utils/api.tsx","common/components/Snackbar/snackbar.tsx","features/login/Login.tsx","features/login/index.js","features/admin/AdminNavItem.tsx","common/utils/interceptor.ts","features/admin/admins/AdminsServise.ts","features/admin/admins/ConfirmDelete.tsx","features/admin/admins/AdminAddDialog.tsx","features/admin/admins/AdminRow.tsx","features/admin/admins/index.js","features/admin/admins/Admins.tsx","features/admin/orders/OrdersServise.ts","features/admin/orders/ConfirmDelete.tsx","features/admin/orders/OrderRow.tsx","features/admin/orders/index.js","features/admin/orders/Orders.tsx","common/components/Loader/Loader.tsx","features/admin/defects/DefectsContext.ts","features/admin/defects/DeleteDialog/DeleteDialog.tsx","features/admin/defects/InfoDialog/InfoDialog.tsx","features/admin/defects/UpdateDialog/UpdateDialog.tsx","common/components/Status/Status.tsx","features/admin/defects/table/DefectsTableRow.tsx","features/admin/defects/DefectsService.ts","features/admin/defects/DefectsModels.ts","features/admin/defects/table/DefectsTable.tsx","features/admin/defects/index.tsx","common/components/DeleteDialog/DeleteDialog.tsx","features/admin/users/UpdateDialog/UpdateDialog.tsx","features/admin/users/UsersService.ts","features/admin/users/table/UsersTableRow.tsx","features/admin/users/UsersModels.ts","features/admin/users/table/UsersTable.tsx","features/admin/users/index.tsx","features/admin/dashboard/DashboardService.ts","features/admin/dashboard/index.tsx","features/admin/dashboard/DashboardModels.tsx","features/admin/nav.tsx","features/admin/AdminPanel.tsx","common/guards/LoginRoute.tsx","common/guards/ProtectedRoute.tsx","App.tsx","reportWebVitals.ts","index.tsx","features/admin/admins/Admins.module.css"],"names":["module","exports","environment","login","body","a","axios","post","response","sessionStorage","setItem","data","token","err","logOut","removeItem","isLogged","getItem","SnackbarHandler","snack","setSnack","closeSnack","event","reason","open","Snackbar","autoHideDuration","onClose","Alert","elevation","variant","severity","type","message","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","logo","Login","setAuthInfo","useState","classes","validationSchema","Yup","name","required","password","submitHandler","value","logInfo","email","localStorage","admin","isAuth","Container","component","maxWidth","CssBaseline","className","Typography","initialValues","onSubmit","validateOnMount","props","noValidate","handleSubmit","TextField","fullWidth","id","label","values","onBlur","handleBlur","onChange","handleChange","helperText","touched","errors","error","Boolean","Button","disabled","isValid","color","itemText","fontSize","active","fontWeight","primary","MainListItems","path","icon","title","ListItem","NavLink","to","exact","activeClassName","ListItemIcon","ListItemText","disableTypography","telegramApiAxios","create","interceptors","request","use","config","headers","Authorization","status","window","location","reload","getAdmins","get","addAdminData","payload","deleteAdminData","adminsData","delete","updatedList","filter","item","_id","updateAdminData","editAdmin","newData","username","patch","editId","map","ConfirmDelete","setShowDelDialog","setDeleteAdmin","handleClose","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","onClick","AdminAddDialog","setOpen","setEdit","setAddAdmin","setEditAdmin","confirmPassword","matches","min","max","oneOf","x","y","isEqual","prop","compareObj","edit","isChanged","add","style","textAlign","AdminRow","adminData","openDel","setOpenDel","TableRow","TableCell","styles","button","Admins","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","setAdminsData","addAdmin","deleteAdmin","useEffect","admins","Math","floor","length","Array","isArray","ceil","loader","CircularProgress","entityHeader","entityHeaderTitle","disableElevation","entityHeaderButton","Paper","Table","stickyHeader","aria-label","TableHead","elem","uuidv4","TableBody","slice","index","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","target","getOrders","updateOrderData","ordersData","editOrder","done","order","info","formControl","minWidth","OrderRow","orderData","setEditOrder","note","date","quantity","selectValue","setSelectValue","Date","toISOString","substring","FormControl","Select","displayEmpty","MenuItem","Orders","setOrderData","orders","boxShadow","Loader","size","DefectsContext","React","createContext","InfoDialog","setDeleted","useContext","closeModal","Fragment","entityTitle","deleteModal","Card","justifyContent","ContentPhoto","Divider","defect","CardActionArea","CardMedia","height","image","attachment","CardContent","gutterBottom","room","CardActions","paddingTop","padding","UpdateDialog","setUpdated","intialFormValues","priority","open_date","editValidationSchema","shape","setFieldValue","InputLabel","labelId","utils","DateFnsUtils","disableToolbar","format","Satus","Chip","statusLabel","setStatusLabel","toString","DefectsTableRow","setStatus","update","setUpdate","setInfo","del","setDel","openModal","mode","hover","role","tabIndex","align","Status","Tooltip","arrow","Description","CheckCircle","DeleteDialog","getDefects","then","res","editDefect","deleteModeSubmit","setDataSource","deleteDefect","prevVal","tableDefect","catch","columns","statuses","priorities","DefectsTable","admin_username","dataSource","FilteredDataSource","setFilteredDataSource","loaded","setLoaded","deleted","updated","StatusFilter","setStatusFilter","PriorityFilter","setPriorityFilter","defects","updatedData","substr","updateModeSubmit","statusValue","checkModeSumbit","filteredArr","FilterByStatus","FilterByPriority","Provider","NotificationImportant","FormGroup","row","formGroup","TableContainer","entityTableContainer","entityTable","column","labelRowsPerPage","user","first_name","last_name","enabled","position","chat_id","getUsers","editUser","deleteUser","setEnabled","StylizePosition","accesses","positions","UsersTable","AccessFilter","setAccessFilter","PositionFilter","setPositionFilter","users","console","log","enabledValue","FilterByAccess","FilterByPosition","Group","UsersTableRow","AllDefectsArray","OpenDefectsCount","ProccessDefectsCount","ClosedDefectsCount","getDefectsByDateAndStatus","params","date_type","start","end","duration","Today","Yesterday","setDate","getDate","LastWeek","LastMonth","getMonth","openDefects","processDefects","closedDefects","Promise","all","Dashboard","useTheme","datasets","labels","apperiance","doughnutData","setDoughnutData","barData","setBarData","dataFilter","setDataFilter","doughnutOptions","animation","cutoutPercentage","layout","legend","maintainAspectRatio","responsive","tooltips","background","default","bodyFontColor","text","borderColor","divider","borderWidth","footerFontColor","intersect","titleFontColor","DoughnutDataOptions","barOptions","TramRounded","cornerRadius","scales","xAxes","barThickness","maxBarThickness","barPercentage","categoryPercentage","ticks","fontColor","gridLines","drawBorder","yAxes","beginAtZero","borderDash","borderDashOffset","zeroLineBorderDash","zeroLineBorderDashOffset","zeroLineColor","BarDataOptions","getDefectsNumbers","open_defects","proccess_defects","closed_defects","colors","common","white","hoverBorderColor","LockOpen","HourglassEmpty","DoneAll","getDefectsNumbersByDateAndStatus","Grid","container","lg","md","xl","xs","CardHeader","action","Box","options","p","endIcon","ArrowRight","mt","navList","SupervisedUserCircle","InsertChartSharp","root","drawer","breakpoints","up","flexShrink","appBar","zIndex","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","closeMenuButton","marginLeft","StyledBadge","withStyles","createStyles","badge","top","left","borderRadius","border","transform","opacity","Badge","AdminPanel","mobileOpen","setMobileOpen","handleDrawerToggle","logoutHandler","List","AppBar","Toolbar","IconButton","edge","Menu","Hidden","smUp","implementation","Drawer","anchor","direction","ModalProps","keepMounted","Close","xsDown","overlap","anchorOrigin","vertical","horizontal","badgeContent","Avatar","Link","LoginRoute","Component","authInfo","render","pathname","state","from","ProtectedRoute","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.541cd425.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"groups\":\"Orders_groups__5SoMi\",\"entityHeader\":\"Orders_entityHeader__3XQQe\",\"MuiSelect-root\":\"Orders_MuiSelect-root__10brc\",\"entityHeaderTitle\":\"Orders_entityHeaderTitle__s_xAE\",\"entityHeaderButton\":\"Orders_entityHeaderButton__OJbIG\",\"loader\":\"Orders_loader__1QOVR\",\"MuiInput-formControl\":\"Orders_MuiInput-formControl__2xKBd\",\"button\":\"Orders_button__356Oa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteModal\":\"DeleteDialog_deleteModal__23IdA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteModal\":\"DeleteDialog_deleteModal__2klzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__2jkmH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entityHeader\":\"DefectsTable_entityHeader__2JyvH\",\"entityTableContainer\":\"DefectsTable_entityTableContainer__3mzxS\",\"button\":\"DefectsTable_button__3YFDK\",\"entityHeaderTitle\":\"DefectsTable_entityHeaderTitle__3GVLf\",\"entityHeaderButton\":\"DefectsTable_entityHeaderButton__1XXD5\",\"form\":\"DefectsTable_form__1jRBf\",\"deleteModal\":\"DefectsTable_deleteModal__2tgjk\",\"MuiDialogTitle-root\":\"DefectsTable_MuiDialogTitle-root__1H4Ol\",\"formControl\":\"DefectsTable_formControl__24X6l\",\"formGroup\":\"DefectsTable_formGroup__3IbZT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entityHeader\":\"UsersTable_entityHeader__1N2D-\",\"entityTableContainer\":\"UsersTable_entityTableContainer__6Th4w\",\"button\":\"UsersTable_button__2ubsm\",\"entityHeaderTitle\":\"UsersTable_entityHeaderTitle__19dMo\",\"entityHeaderButton\":\"UsersTable_entityHeaderButton__2EkaS\",\"form\":\"UsersTable_form__1L0aN\",\"deleteModal\":\"UsersTable_deleteModal__3yPo-\",\"MuiDialogTitle-root\":\"UsersTable_MuiDialogTitle-root__db1Av\",\"formControl\":\"UsersTable_formControl__V_pWU\",\"formGroup\":\"UsersTable_formGroup__1GsKE\"};","export const environment = {\r\n    production: false,\r\n    BASEURL: 'https://digichlist-api.herokuapp.com/api/',\r\n};\r\n","import axios from 'axios';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport const login = async (body) => {\r\n    try {\r\n        const response = await axios.post(`${environment.BASEURL}authorization/login`, body);\r\n        sessionStorage.setItem('secret-auth-token', response.data.token);\r\n        return response.data;\r\n    } catch (err) {\r\n        return { err: err };\r\n    }\r\n};\r\nexport const logOut = () => {\r\n    sessionStorage.removeItem('secret-auth-token');\r\n};\r\nexport const isLogged = () => {\r\n    return !!sessionStorage.getItem('secret-auth-token');\r\n};\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert, { Color } from '@material-ui/lab/Alert';\r\n\r\nexport const messages = [];\r\n\r\n// interface Snackbar {\r\n//     snack: {\r\n//         open: boolean;\r\n//         message: string;\r\n//         type: Color;\r\n//     };\r\n//     setSnack(snack);\r\n// }\r\n\r\nexport default function SnackbarHandler({ snack, setSnack }): JSX.Element {\r\n    const closeSnack = (event, reason?) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnack({ open: false });\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={snack.open} autoHideDuration={3000} onClose={closeSnack}>\r\n            <Alert\r\n                elevation={4}\r\n                variant='filled'\r\n                onClose={(event) => closeSnack(event)}\r\n                severity={snack.type}>\r\n                {snack.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { isLogged, login } from './../../common/utils/api';\r\nimport SnackbarHandler from './../../common/components/Snackbar/snackbar';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport UserContext from './UserContext';\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    logo: {\r\n        backgroundColor: '#fafafa',\r\n    },\r\n}));\r\n\r\nconst Login = ({ setAuthInfo }): JSX.Element => {\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: 'success' });\r\n    const classes = useStyles();\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        password: '',\r\n    };\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(`Обов'язкове поле`),\r\n        password: Yup.string().required(`Обов'язкове поле`),\r\n    });\r\n    const submitHandler = async (value) => {\r\n        const logInfo = { email: value.name, password: value.password };\r\n        const response = await login(logInfo);\r\n        if (response.err) {\r\n            setSnack({\r\n                open: true,\r\n                message: 'Неправильний логін або пароль',\r\n                type: 'error',\r\n            });\r\n        }\r\n        localStorage.setItem('admin_username', response.admin);\r\n        const isAuth = await isLogged();\r\n        setAuthInfo(isAuth);\r\n    };\r\n\r\n    return (\r\n        <Container component='main' maxWidth='xs'>\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component='h1' variant='h5'>\r\n                    Log in\r\n                </Typography>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={submitHandler}\r\n                    validateOnMount={true}>\r\n                    {(props) => (\r\n                        <form className={classes.form} noValidate onSubmit={props.handleSubmit}>\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                id='name'\r\n                                label='Name'\r\n                                name='name'\r\n                                value={props.values.name}\r\n                                onBlur={props.handleBlur}\r\n                                onChange={props.handleChange}\r\n                                helperText={props.touched.name ? props.errors.name : ''}\r\n                                error={props.touched.name && Boolean(props.errors.name)}\r\n                            />\r\n\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                name='password'\r\n                                label='Password'\r\n                                type='password'\r\n                                id='password'\r\n                                onBlur={props.handleBlur}\r\n                                value={props.values.password}\r\n                                onChange={props.handleChange}\r\n                                helperText={props.touched.password ? props.errors.password : ''}\r\n                                error={props.touched.password && Boolean(props.errors.password)}\r\n                            />\r\n\r\n                            <Button\r\n                                disabled={!props.isValid}\r\n                                type='submit'\r\n                                fullWidth\r\n                                variant='contained'\r\n                                color='primary'\r\n                                className={classes.submit}>\r\n                                Log In\r\n                            </Button>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n            <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n        </Container>\r\n    );\r\n};\r\nexport default Login;\r\n","import Login from './Login';\r\nexport default Login;\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    itemText: {\r\n        fontSize: '1rem',\r\n    },\r\n    active: {\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        backgroundColor: theme.palette.primary.main,\r\n        '& svg': {\r\n            color: 'white',\r\n        },\r\n    },\r\n}));\r\n\r\nexport const MainListItems = ({ path, icon, title }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <ListItem component={NavLink} to={path} exact activeClassName={classes.active}>\r\n            <ListItemIcon>{icon}</ListItemIcon>\r\n            <ListItemText\r\n                disableTypography\r\n                className={classes.itemText}\r\n                color='primary'\r\n                primary={title}\r\n            />\r\n        </ListItem>\r\n    );\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { logOut } from './api';\r\n\r\nexport const telegramApiAxios = axios.create({});\r\ntelegramApiAxios.interceptors.request.use((config) => {\r\n    const token = sessionStorage.getItem('secret-auth-token');\r\n    if (token) {\r\n        config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n});\r\n\r\ntelegramApiAxios.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    (error) => {\r\n        if (error.response.status === 401) {\r\n            logOut();\r\n            window.location.reload();\r\n        }\r\n        return error;\r\n    },\r\n);\r\n","import { telegramApiAxios } from '../../../common/utils/interceptor';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport const getAdmins = async () => await telegramApiAxios.get(`${environment.BASEURL}admin/all`);\r\n\r\nexport const addAdminData = async (payload) => {\r\n    try {\r\n        const response = await telegramApiAxios.post(\r\n            `${environment.BASEURL}admin/registration`,\r\n            payload,\r\n        );\r\n        return response.data.admin;\r\n    } catch (err) {\r\n        return { err: err };\r\n    }\r\n};\r\n\r\nexport const deleteAdminData = async (id, adminsData) => {\r\n    try {\r\n        const response = await telegramApiAxios.delete(`${environment.BASEURL}admin/delete/${id}`);\r\n        const updatedList = adminsData.filter((item) => id !== item._id);\r\n        return updatedList;\r\n    } catch (err) {\r\n        return { err: err };\r\n    }\r\n};\r\n\r\nexport const updateAdminData = async (adminsData, editAdmin) => {\r\n    try {\r\n        const newData = {\r\n            email: editAdmin.data.email,\r\n            username: editAdmin.data.username,\r\n            password: editAdmin.data.password,\r\n        };\r\n        const response = await telegramApiAxios.patch(\r\n            `${environment.BASEURL}admin/update/${editAdmin.editId}`,\r\n            newData,\r\n        );\r\n\r\n        const updatedList = adminsData.map((item) =>\r\n            response.data.admin._id === item._id ? response.data.admin : item,\r\n        );\r\n        return updatedList;\r\n    } catch (err) {\r\n        return { err: err };\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst ConfirmDelete = ({ open, setShowDelDialog, id, setDeleteAdmin }) => {\r\n    const handleClose = () => {\r\n        setShowDelDialog(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby='responsive-dialog-title'>\r\n            <DialogTitle id='responsive-dialog-title'>Видалити адміна</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>Ви впевнені що хочете видалити адміна?</DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={handleClose} color='primary'>\r\n                    Відмінити\r\n                </Button>\r\n                <Button\r\n                    onClick={() => {\r\n                        setShowDelDialog(false);\r\n                        setDeleteAdmin({ id: id, delete: true });\r\n                    }}\r\n                    color='primary'\r\n                    autoFocus>\r\n                    Видалити\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Formik } from 'formik';\r\n\r\nimport * as Yup from 'yup';\r\n\r\nconst AdminAddDialog = ({ open, setOpen, admin, setEdit, setAddAdmin, setEditAdmin }) => {\r\n    const initialValues = {\r\n        username: admin ? admin.username : '',\r\n        email: admin ? admin.email : '',\r\n        password: '',\r\n        confirmPassword: '',\r\n    };\r\n\r\n    const validationSchema = admin\r\n        ? Yup.object({\r\n              username: Yup.string()\r\n                  .matches(\r\n                      /^(?=[a-zA-Z0-9._]{6,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/,\r\n                      `Введіть інше ім'я`,\r\n                  )\r\n                  .required('Заповни поле')\r\n                  .min(5, \"Коротке ім'я\")\r\n                  .max(20, \"Задовге ім'я\"),\r\n              email: Yup.string().email('Введіть коректну пошту').required('Заповни поле'),\r\n              password: Yup.string()\r\n                  .min(8, 'Мінімум 8 символів')\r\n                  .matches(\r\n                      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\r\n                      'Невідповідний пароль',\r\n                  ),\r\n              confirmPassword: Yup.string().oneOf(\r\n                  [Yup.ref('password'), null],\r\n                  'Паролі не співпадають',\r\n              ),\r\n          })\r\n        : Yup.object({\r\n              username: Yup.string()\r\n                  .matches(\r\n                      /^(?=[a-zA-Z0-9._]{6,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/,\r\n                      \"Введіть інше ім'я\",\r\n                  )\r\n                  .required('Заповни поле')\r\n                  .min(5, \"Коротке ім'я\")\r\n                  .max(20, \"Задовге ім'я\"),\r\n              email: Yup.string().email('Введіть коректну пошту').required('Заповни поле'),\r\n              password: Yup.string()\r\n                  .required('Заповни поле')\r\n                  .min(8, 'Мінімум 8 символів')\r\n                  .matches(\r\n                      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\r\n                      'Невідповідний пароль',\r\n                  ),\r\n              confirmPassword: Yup.string().oneOf(\r\n                  [Yup.ref('password'), null],\r\n                  'Паролі не співпадають',\r\n              ),\r\n          });\r\n    const handleClose = () => {\r\n        admin ? setEdit(false) : setOpen(false);\r\n    };\r\n\r\n    const compareObj = (x, y) => {\r\n        let isEqual = true;\r\n        for (const prop in x) {\r\n            if (x[prop] !== y[prop]) {\r\n                isEqual = false;\r\n                break;\r\n            }\r\n        }\r\n        return isEqual;\r\n    };\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                id='form-dialog'\r\n                aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>\r\n                    {admin ? 'Редагувати' : 'Добавити'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={validationSchema}\r\n                        validateOnMount={true}\r\n                        onSubmit={(data) => {\r\n                            if (admin) {\r\n                                if (\r\n                                    compareObj(\r\n                                        {\r\n                                            username: admin.username,\r\n                                            email: admin.email,\r\n                                            password: admin.password,\r\n                                        },\r\n                                        (data =\r\n                                            data.password === ''\r\n                                                ? { ...data, password: admin.password }\r\n                                                : data),\r\n                                    )\r\n                                ) {\r\n                                    setEditAdmin({\r\n                                        edit: true,\r\n                                        data: data,\r\n                                        isChanged: false,\r\n                                        editId: admin._id,\r\n                                    });\r\n                                } else {\r\n                                    setEditAdmin({\r\n                                        edit: true,\r\n                                        data: data,\r\n                                        isChanged: true,\r\n                                        editId: admin._id,\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                setAddAdmin({\r\n                                    add: true,\r\n                                    data: data,\r\n                                });\r\n                            }\r\n                        }}>\r\n                        {({\r\n                            isValid,\r\n                            errors,\r\n                            touched,\r\n                            values,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            handleSubmit,\r\n                        }) => (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <TextField\r\n                                    name='username'\r\n                                    value={values.username}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    autoFocus\r\n                                    margin='dense'\r\n                                    id='username'\r\n                                    label={'Імя користувача'}\r\n                                    type='text'\r\n                                    fullWidth\r\n                                    error={touched.username && Boolean(errors.username)}\r\n                                />\r\n                                <TextField\r\n                                    name='email'\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    autoFocus\r\n                                    margin='dense'\r\n                                    id='email'\r\n                                    label={'Пошта'}\r\n                                    type='text'\r\n                                    fullWidth\r\n                                    error={touched.email && Boolean(errors.email)}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    margin='dense'\r\n                                    type='password'\r\n                                    label={'Введіть пароль'}\r\n                                    name='password'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.password}\r\n                                    helperText={touched.password ? errors.password : ''}\r\n                                    error={touched.password && Boolean(errors.password)}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    margin='dense'\r\n                                    type='password'\r\n                                    label={'Підтвердіть пароль'}\r\n                                    name='confirmPassword'\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.confirmPassword}\r\n                                    helperText={\r\n                                        touched.confirmPassword ? errors.confirmPassword : ''\r\n                                    }\r\n                                    error={\r\n                                        touched.confirmPassword && Boolean(errors.confirmPassword)\r\n                                    }\r\n                                />\r\n\r\n                                <div style={{ margin: '1rem', textAlign: 'center' }}>\r\n                                    <Button onClick={handleClose} color='primary'>\r\n                                        {'Відмінити'}\r\n                                    </Button>\r\n                                    <Button disabled={!isValid} type='submit' color='primary'>\r\n                                        {admin ? 'Оновити' : 'Добавити'}\r\n                                    </Button>\r\n                                </div>\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminAddDialog;\r\n","import React, { useState } from 'react';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport ConfirmDelete from './ConfirmDelete';\r\nimport AdminAddDialog from './AdminAddDialog';\r\nimport styles from './Admins.module.css';\r\n\r\nconst AdminRow = ({ adminData, id, setDeleteAdmin, setEditAdmin }) => {\r\n    const { username, email, _id } = adminData;\r\n    const [edit, setEdit] = useState(false);\r\n    const [openDel, setOpenDel] = useState(false);\r\n\r\n    const dialogOpenHandler = () => {\r\n        setEdit(true);\r\n    };\r\n\r\n    const dialogOpenDelHandler = () => {\r\n        setOpenDel(true);\r\n    };\r\n    return (\r\n        <TableRow>\r\n            <TableCell>{id + 1}</TableCell>\r\n            <TableCell>{username}</TableCell>\r\n            <TableCell>{email}</TableCell>\r\n            <TableCell>\r\n                <div>\r\n                    <Button\r\n                        color='primary'\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        onClick={dialogOpenHandler}>\r\n                        <EditIcon />\r\n                    </Button>\r\n                    <Button\r\n                        color='primary'\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        onClick={dialogOpenDelHandler}>\r\n                        <DeleteIcon />\r\n                    </Button>\r\n                </div>\r\n            </TableCell>\r\n            {openDel ? (\r\n                <ConfirmDelete\r\n                    open={openDel}\r\n                    setShowDelDialog={setOpenDel}\r\n                    id={_id}\r\n                    setDeleteAdmin={setDeleteAdmin}\r\n                />\r\n            ) : null}\r\n            {edit ? (\r\n                <AdminAddDialog\r\n                    open={edit}\r\n                    setOpen={setEdit}\r\n                    setAddAdmin={null}\r\n                    admin={adminData}\r\n                    setEdit={setEdit}\r\n                    setEditAdmin={setEditAdmin}\r\n                />\r\n            ) : null}\r\n        </TableRow>\r\n    );\r\n};\r\nexport default AdminRow;\r\n","import { Admins } from './Admins';\r\nexport default Admins;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AddCircle from '@material-ui/icons/AddCircle';\r\n\r\nimport styles from './Admins.module.css';\r\nimport { getAdmins, addAdminData, deleteAdminData, updateAdminData } from './AdminsServise';\r\nimport AdminRow from './AdminRow';\r\nimport AdminAddDialog from './AdminAddDialog';\r\n\r\nimport SnackbarHandler from '../../../common/components/Snackbar/snackbar';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nexport const Admins = () => {\r\n    type Admin = Array<{\r\n        email: string;\r\n        username: string;\r\n        id: string;\r\n        password: string;\r\n    }>;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [adminsData, setAdminsData] = useState<Admin | []>([]);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [addAdmin, setAddAdmin] = useState({\r\n        add: false,\r\n        data: {},\r\n    });\r\n\r\n    const [editAdmin, setEditAdmin] = useState({\r\n        edit: false,\r\n        data: {},\r\n        editId: 0,\r\n        isChanged: false,\r\n    });\r\n\r\n    const [deleteAdmin, setDeleteAdmin] = useState({\r\n        delete: false,\r\n        id: 0,\r\n    });\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: '' });\r\n    useEffect(() => {\r\n        (async function () {\r\n            const response = await getAdmins();\r\n            if (typeof response === 'object') {\r\n                setAdminsData(response.data.admins);\r\n                setLoading(false);\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Адміни успішно завантажені',\r\n                    type: 'success',\r\n                });\r\n            } else {\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Сталася помилка при завантажені',\r\n                    type: 'error',\r\n                });\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            if (addAdmin.add) {\r\n                const response = await addAdminData(addAdmin.data);\r\n                if (!response.err) {\r\n                    setAdminsData([...adminsData, response]);\r\n                    setOpen(false);\r\n                    setPage(Math.floor((adminsData.length - 1) / rowsPerPage));\r\n                    setSnack({\r\n                        open: true,\r\n                        message: 'Адміністратора додано',\r\n                        type: 'success',\r\n                    });\r\n                } else {\r\n                    setOpen(false);\r\n                    setSnack({\r\n                        open: true,\r\n                        message: response.err,\r\n                        type: 'error',\r\n                    });\r\n                }\r\n            }\r\n        })();\r\n    }, [addAdmin]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            if (deleteAdmin.delete) {\r\n                const response = await deleteAdminData(deleteAdmin.id, adminsData);\r\n                if (Array.isArray(response)) {\r\n                    setAdminsData(response);\r\n                    setPage(Math.ceil((adminsData.length - 1) / rowsPerPage) - 1);\r\n                    setSnack({\r\n                        open: true,\r\n                        message: 'Адміністратора видалено',\r\n                        type: 'success',\r\n                    });\r\n                } else {\r\n                    setOpen(false);\r\n                    setSnack({\r\n                        open: true,\r\n                        message: response.err,\r\n                        type: 'error',\r\n                    });\r\n                }\r\n            }\r\n        })();\r\n    }, [deleteAdmin]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            if (!editAdmin.isChanged && editAdmin.edit) {\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Нічого не змінено',\r\n                    type: 'info',\r\n                });\r\n            } else {\r\n                if (editAdmin.edit) {\r\n                    const response = await updateAdminData(adminsData, editAdmin);\r\n                    if (Array.isArray(response)) {\r\n                        setAdminsData(response);\r\n                        setOpen(false);\r\n                        setSnack({\r\n                            open: true,\r\n                            message: 'Групу редаговано',\r\n                            type: 'success',\r\n                        });\r\n                    } else {\r\n                        setSnack({\r\n                            open: true,\r\n                            message: response.err,\r\n                            type: 'error',\r\n                        });\r\n                        setOpen(false);\r\n                    }\r\n                }\r\n            }\r\n        })();\r\n    }, [editAdmin]);\r\n\r\n    const dialogOpenHandler = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const fieldsName = ['№', \"Ім'я\", 'Пошта', 'Дії'];\r\n    return loading ? (\r\n        <div className={styles.loader}>\r\n            <CircularProgress />\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <div className={styles.entityHeader}>\r\n                <Typography\r\n                    component='h2'\r\n                    variant='h4'\r\n                    color='textPrimary'\r\n                    className={styles.entityHeaderTitle}>\r\n                    {'Адміністратори'}\r\n                </Typography>\r\n                <Button\r\n                    onClick={dialogOpenHandler}\r\n                    disableElevation\r\n                    variant='contained'\r\n                    color='primary'\r\n                    className={styles.entityHeaderButton}>\r\n                    <AddCircle />\r\n                    {'Додати адміна'}\r\n                </Button>\r\n            </div>\r\n            <Paper elevation={6}>\r\n                <Table stickyHeader aria-label='sticky table'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {fieldsName.map((elem) => (\r\n                                <TableCell key={uuidv4()}>{elem}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {adminsData\r\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            .map((adminData, index) => (\r\n                                <AdminRow\r\n                                    adminData={adminData}\r\n                                    key={uuidv4()}\r\n                                    id={index}\r\n                                    setEditAdmin={setEditAdmin}\r\n                                    setDeleteAdmin={setDeleteAdmin}\r\n                                />\r\n                            ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25, 50]}\r\n                    component='div'\r\n                    count={adminsData.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n            <AdminAddDialog\r\n                open={open}\r\n                setOpen={setOpen}\r\n                setAddAdmin={setAddAdmin}\r\n                admin={null}\r\n                setEdit={null}\r\n                setEditAdmin={null}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import { telegramApiAxios } from '../../../common/utils/interceptor';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport const getOrders = async () => await telegramApiAxios.get(`${environment.BASEURL}order/all`);\r\n\r\nexport const updateOrderData = async (ordersData, editOrder) => {\r\n    try {\r\n        const newData = {\r\n            ...editOrder.data,\r\n            done: !editOrder.data.done,\r\n        };\r\n        const response = await telegramApiAxios.patch(\r\n            `${environment.BASEURL}order/update/${editOrder.data._id}`,\r\n            newData,\r\n        );\r\n\r\n        const updatedList = ordersData.map((item) =>\r\n            response.data.order._id === item._id ? response.data.order : item,\r\n        );\r\n        return updatedList;\r\n    } catch (err) {\r\n        return { err: err };\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst ConfirmDelete = ({ open, setShowDelDialog, info }) => {\r\n    const handleClose = () => {\r\n        setShowDelDialog(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby='responsive-dialog-title'>\r\n            <DialogTitle id='responsive-dialog-title'>Додаткова інформація</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>{info}</DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color='primary' autoFocus>\r\n                    Закрити\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default ConfirmDelete;\r\n","import React, { useState } from 'react';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Button from '@material-ui/core/Button';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ConfirmDelete from './ConfirmDelete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n}));\r\n\r\nconst OrderRow = ({ orderData, id, setEditOrder }) => {\r\n    const classes = useStyles();\r\n\r\n    const { title, done, note, date, quantity, username } = orderData;\r\n    const [selectValue, setSelectValue] = useState(done);\r\n\r\n    const [openDel, setOpenDel] = useState(false);\r\n\r\n    const dialogOpenDelHandler = () => {\r\n        setOpenDel(true);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setSelectValue(!selectValue);\r\n        setEditOrder({ edit: true, id: username, data: orderData });\r\n    };\r\n    return (\r\n        <TableRow>\r\n            <TableCell>{id}</TableCell>\r\n            <TableCell>{title}</TableCell>\r\n            <TableCell>{quantity}</TableCell>\r\n            <TableCell>{new Date(date).toISOString().substring(0, 10)}</TableCell>\r\n            <TableCell>\r\n                <Button variant='contained' disabled={!note} onClick={dialogOpenDelHandler}>\r\n                    Переглянути\r\n                </Button>\r\n            </TableCell>\r\n            <TableCell>\r\n                <FormControl className={classes.formControl}>\r\n                    <Select\r\n                        id='demo-simple-select'\r\n                        value={selectValue}\r\n                        displayEmpty\r\n                        onChange={handleChange}>\r\n                        <MenuItem value={selectValue}>\r\n                            {selectValue ? 'Виконано' : 'В обробці'}\r\n                        </MenuItem>\r\n                        <MenuItem>{!selectValue ? 'Виконано' : 'В обробці'}</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </TableCell>\r\n            {openDel ? (\r\n                <ConfirmDelete open={openDel} setShowDelDialog={setOpenDel} info={note} />\r\n            ) : null}{' '}\r\n        </TableRow>\r\n    );\r\n};\r\nexport default OrderRow;\r\n","import { Orders } from './Orders';\r\nexport default Orders;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AddCircle from '@material-ui/icons/AddCircle';\r\n\r\nimport styles from './Orders.module.css';\r\nimport { getOrders, updateOrderData } from './OrdersServise';\r\nimport OrderRow from './OrderRow';\r\n\r\nimport SnackbarHandler from '../../../common/components/Snackbar/snackbar';\r\n\r\nexport const Orders = () => {\r\n    type Admin = Array<{\r\n        email: string;\r\n        username: string;\r\n        id: string;\r\n        password: string;\r\n    }>;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [ordersData, setOrderData] = useState<Admin | []>([]);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [editOrder, setEditOrder] = useState({\r\n        edit: false,\r\n        id: 0,\r\n        data: {},\r\n    });\r\n\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: 'success' });\r\n    useEffect(() => {\r\n        (async function () {\r\n            const response = await getOrders();\r\n            if (typeof response === 'object') {\r\n                setOrderData(response.data.orders);\r\n                setLoading(false);\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Замовлення успішно завантажені',\r\n                    type: 'success',\r\n                });\r\n            } else {\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Сталася помилка при завантажені',\r\n                    type: 'error',\r\n                });\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            if (editOrder.edit) {\r\n                const response = await updateOrderData(ordersData, editOrder);\r\n                if (Array.isArray(response)) {\r\n                    setOrderData(response);\r\n                    setOpen(false);\r\n                    setSnack({\r\n                        open: true,\r\n                        message: 'Групу редаговано',\r\n                        type: 'success',\r\n                    });\r\n                } else {\r\n                    setSnack({\r\n                        open: true,\r\n                        message: response.err,\r\n                        type: 'error',\r\n                    });\r\n                    setOpen(false);\r\n                }\r\n            }\r\n        })();\r\n    }, [editOrder]);\r\n\r\n    const dialogOpenHandler = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const fieldsName = ['№', 'Назва', 'Кількість', 'Дата', 'Примітка', 'Статус'];\r\n    return loading ? (\r\n        <div className={styles.loader}>\r\n            <CircularProgress />\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <div className={styles.entityHeader}>\r\n                <Typography\r\n                    component='h2'\r\n                    variant='h4'\r\n                    color='textPrimary'\r\n                    className={styles.entityHeaderTitle}>\r\n                    Замовлення\r\n                </Typography>\r\n            </div>\r\n            <div style={{ boxShadow: '0.5rem 1rem 2rem gray' }}>\r\n                <Table stickyHeader aria-label='sticky table'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {fieldsName.map((elem) => (\r\n                                <TableCell key={uuidv4()}>{elem}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {ordersData\r\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            .map((orderData, index) => (\r\n                                <OrderRow\r\n                                    orderData={orderData}\r\n                                    key={uuidv4()}\r\n                                    id={index}\r\n                                    setEditOrder={setEditOrder}\r\n                                />\r\n                            ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25, 50]}\r\n                    component='div'\r\n                    count={ordersData.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </div>\r\n            <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport classes from './Loader.module.css';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Loader = (): JSX.Element => (\r\n    <div className={classes.Loader}>\r\n        <CircularProgress color={'primary'} size={70} />\r\n    </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport { Defect } from './DefectsModels';\r\n\r\ntype DefectStatus = 'open' | 'fixing' | 'solved' | string;\r\n\r\ninterface IDeleted {\r\n    status: boolean;\r\n    id: string;\r\n}\r\ninterface IUpdated {\r\n    status: boolean;\r\n    data: any;\r\n}\r\ninterface IStatus {\r\n    status: boolean;\r\n    body: any;\r\n    value: DefectStatus;\r\n}\r\n\r\ninterface IDefectsContext {\r\n    setDeleted: React.Dispatch<React.SetStateAction<IDeleted>>;\r\n    setUpdated: React.Dispatch<React.SetStateAction<IUpdated>>;\r\n}\r\n\r\nconst DefectsContext = React.createContext<IDefectsContext>({} as IDefectsContext);\r\n\r\nexport default DefectsContext;\r\n","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@material-ui/core';\r\n\r\nimport styles from './DeleteDialog.module.css';\r\nimport DefectsContext from '../DefectsContext';\r\n\r\nfunction InfoDialog({ open, setOpen, id }): JSX.Element {\r\n    const { setDeleted } = React.useContext(DefectsContext);\r\n\r\n    const closeModal = () => {\r\n        setOpen(false);\r\n    };\r\n    function deleteHandler() {\r\n        setDeleted(() => {\r\n            return {\r\n                status: true,\r\n                id: id,\r\n            };\r\n        });\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog open={open} onClose={closeModal} aria-labelledby='simple-dialog-title'>\r\n                <DialogTitle className={styles.entityTitle}>Видалити дефект?</DialogTitle>\r\n                <DialogActions className={styles.deleteModal}>\r\n                    <Button onClick={closeModal} color='primary'>\r\n                        Скасувати\r\n                    </Button>\r\n                    <Button\r\n                        onClick={deleteHandler}\r\n                        type='submit'\r\n                        disableElevation\r\n                        variant='contained'\r\n                        color='primary'>\r\n                        Підтвердити\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default InfoDialog;\r\n","import React from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Card,\r\n    CardActionArea,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    Typography,\r\n    Divider,\r\n} from '@material-ui/core';\r\nimport { Avatar, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport styles from './InfoDialog.module.css';\r\n\r\nconst useStyles = makeStyles({\r\n    Card: {\r\n        maxWidth: 345,\r\n    },\r\n    DialogContent: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n    },\r\n    ContentPhoto: {\r\n        maxWidth: '100%',\r\n    },\r\n    Divider: {\r\n        margin: '0.5rem 0',\r\n    },\r\n});\r\n\r\nfunction InfoDialog({ open, setOpen, defect }): JSX.Element {\r\n    const classes = useStyles();\r\n\r\n    const closeModal = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog open={open} onClose={closeModal} aria-labelledby='simple-dialog-title'>\r\n                <Card className={classes.Card}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            className={classes.ContentPhoto}\r\n                            component='img'\r\n                            height='200'\r\n                            image={\r\n                                defect.attachment !== ''\r\n                                    ? defect.attachment\r\n                                    : 'https://makitweb.com/demo/broken_image/images/noimage.png'\r\n                            }\r\n                            title='Фото дефекту'\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant='h5' component='h2'>\r\n                                Місце: {defect.room}\r\n                            </Typography>\r\n                            <Divider className={classes.Divider} />\r\n                            <Typography variant='body1' color='textSecondary' component='p'>\r\n                                Проблема: {defect.title}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button onClick={closeModal} variant='contained' color='primary'>\r\n                            Закрити\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default InfoDialog;\r\n","import React, { useContext } from 'react';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport styles from './UpdateDialog.module.css';\r\nimport DefectsContext from '../DefectsContext';\r\n\r\nconst useStyles = makeStyles({\r\n    DialogContent: {\r\n        '&:first-child': {\r\n            paddingTop: '0',\r\n        },\r\n    },\r\n    DialogActions: {\r\n        padding: '1rem',\r\n    },\r\n});\r\n\r\nfunction UpdateDialog({ open, setOpen, defect }): JSX.Element {\r\n    const { setUpdated } = useContext(DefectsContext);\r\n    const classes = useStyles();\r\n\r\n    const intialFormValues = {\r\n        title: defect.title,\r\n        room: defect.room,\r\n        status: defect.status,\r\n        priority: defect.priority,\r\n        open_date: defect.open_date,\r\n    };\r\n    const editValidationSchema = Yup.object().shape({\r\n        title: Yup.string().min(5, 'Надто короткий опис').max(50, 'Надто довгий опис'),\r\n        room: Yup.string().min(3, 'Надто коротка назва').max(50, 'Надто довга назва'),\r\n        status: Yup.string(),\r\n        priority: Yup.number(),\r\n        open_date: Yup.date(),\r\n    });\r\n\r\n    const closeModal = () => {\r\n        setOpen(false);\r\n    };\r\n    const submit = (values) => {\r\n        setUpdated({\r\n            status: true,\r\n            data: {\r\n                id: defect._id,\r\n                values: { ...defect, ...values },\r\n                intialFormValues: { ...intialFormValues },\r\n            },\r\n        });\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog open={open} onClose={closeModal} aria-labelledby='simple-dialog-title'>\r\n                <DialogTitle className={styles.entityTitle}>Редагувати дефект</DialogTitle>\r\n                <Formik\r\n                    initialValues={intialFormValues}\r\n                    validationSchema={editValidationSchema}\r\n                    onSubmit={(values) => submit(values)}>\r\n                    {({\r\n                        isValid,\r\n                        values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        setFieldValue,\r\n                    }) => (\r\n                        <form className={styles.form} onSubmit={handleSubmit}>\r\n                            <DialogContent className={classes.DialogContent}>\r\n                                <TextField\r\n                                    autoFocus\r\n                                    margin='dense'\r\n                                    id='title'\r\n                                    label='Опис'\r\n                                    fullWidth\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.title}\r\n                                    helperText={touched.title ? errors.title : ''}\r\n                                    error={touched.title && Boolean(errors.title)}\r\n                                />\r\n                                <TextField\r\n                                    margin='dense'\r\n                                    id='room'\r\n                                    label='Місце дефекту'\r\n                                    fullWidth\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.room}\r\n                                    helperText={touched.room ? errors.room : ''}\r\n                                    error={touched.room && Boolean(errors.room)}\r\n                                />\r\n                                <FormControl fullWidth margin='dense'>\r\n                                    <InputLabel id='status-label'>Cтатус</InputLabel>\r\n                                    <Select\r\n                                        labelId='status-label'\r\n                                        id='status'\r\n                                        name='status'\r\n                                        value={values.status}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}>\r\n                                        <MenuItem value={'open'}>Відкритий</MenuItem>\r\n                                        <MenuItem value={'fixing'}>В процесі</MenuItem>\r\n                                        <MenuItem value={'solved'}>Закритий</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                {errors.status && touched.status ? (\r\n                                    <div>{errors.status}</div>\r\n                                ) : null}\r\n                                <FormControl fullWidth margin='dense'>\r\n                                    <InputLabel id='status-label'>Пріоритет</InputLabel>\r\n                                    <Select\r\n                                        labelId='status-label'\r\n                                        id='priority'\r\n                                        name='priority'\r\n                                        value={values.priority}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}>\r\n                                        <MenuItem value={1}>Терміновий</MenuItem>\r\n                                        <MenuItem value={2}>Якнайшвидше</MenuItem>\r\n                                        <MenuItem value={3}>Звичайний</MenuItem>\r\n                                        <MenuItem value={4}>Відустній</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                {errors.status && touched.status ? (\r\n                                    <div>{errors.status}</div>\r\n                                ) : null}\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant='inline'\r\n                                        format='yyyy-MM-dd'\r\n                                        margin='normal'\r\n                                        id='date-picker-inline'\r\n                                        label='Дата появи'\r\n                                        name='open_date'\r\n                                        value={values.open_date}\r\n                                        onChange={(date) => setFieldValue('open_date', date)}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                                {errors.open_date && touched.open_date ? (\r\n                                    <div>{errors.open_date}</div>\r\n                                ) : null}\r\n                            </DialogContent>\r\n                            <DialogActions className={classes.DialogActions}>\r\n                                <Button onClick={closeModal}>Скасувати</Button>\r\n                                <Button\r\n                                    type='submit'\r\n                                    disabled={!isValid}\r\n                                    disableElevation\r\n                                    variant='contained'\r\n                                    color='primary'>\r\n                                    Зберегти\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default UpdateDialog;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Chip } from '@material-ui/core';\r\n\r\nfunction Satus({ status }): JSX.Element {\r\n    const [statusLabel, setStatusLabel] = useState(<Chip label='Відкритий' color='secondary' />);\r\n    useEffect(() => {\r\n        switch (status.toString()) {\r\n            case 'all':\r\n                setStatusLabel(\r\n                    <Chip label='Всі' style={{ backgroundColor: '#4caf50', color: 'white' }} />,\r\n                );\r\n                break;\r\n            case 'open':\r\n                setStatusLabel(\r\n                    <Chip\r\n                        label='Відкритий'\r\n                        style={{ backgroundColor: '#4caf50', color: 'white' }}\r\n                    />,\r\n                );\r\n                break;\r\n            case 'fixing':\r\n                setStatusLabel(\r\n                    <Chip\r\n                        label='В процесі'\r\n                        style={{ backgroundColor: '#ff9800', color: 'white' }}\r\n                    />,\r\n                );\r\n                break;\r\n            case 'solved':\r\n                setStatusLabel(<Chip label='Закритий' />);\r\n                break;\r\n            case 'true':\r\n                setStatusLabel(\r\n                    <Chip\r\n                        label='Активний'\r\n                        style={{ backgroundColor: '#4caf50', color: 'white' }}\r\n                    />,\r\n                );\r\n                break;\r\n            case 'false':\r\n                setStatusLabel(<Chip label='Неактивний' />);\r\n                break;\r\n        }\r\n    }, []);\r\n    return statusLabel;\r\n}\r\n\r\nexport default Satus;\r\n","import React from 'react';\r\nimport { TableCell, TableRow, Button, Tooltip } from '@material-ui/core';\r\nimport { Edit, Delete, Description, CheckCircle } from '@material-ui/icons';\r\n\r\nimport styles from './DefectsTable.module.css';\r\nimport { Defect } from '../DefectsModels';\r\nimport DeleteDialog from '../DeleteDialog/DeleteDialog';\r\nimport InfoDialog from '../InfoDialog/InfoDialog';\r\nimport UpdateDialog from '../UpdateDialog/UpdateDialog';\r\nimport Status from '../../../../common/components/Status/Status';\r\n\r\nfunction DefectsTableRow({ defect, index, setStatus }): JSX.Element {\r\n    const [update, setUpdate] = React.useState(false);\r\n    const [info, setInfo] = React.useState(false);\r\n    const [del, setDel] = React.useState(false);\r\n\r\n    const checkHandler = () => {\r\n        setStatus({ status: true, data: { ...defect }, value: 'solved' });\r\n    };\r\n\r\n    const openModal = (mode) => {\r\n        switch (mode) {\r\n            case 'update':\r\n                setUpdate(true);\r\n                break;\r\n            case 'info':\r\n                setInfo(true);\r\n                break;\r\n            case 'delete':\r\n                setDel(true);\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableRow hover role='checkbox' tabIndex={-1}>\r\n            <TableCell>{index}</TableCell>\r\n            <TableCell>{defect.title}</TableCell>\r\n            <TableCell>{defect.room}</TableCell>\r\n            <TableCell align='center'>\r\n                <Status status={defect.status} />\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n                <Tooltip title='Детальніша інформація' arrow>\r\n                    <Button\r\n                        onClick={() => openModal('info')}\r\n                        disableElevation\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        color='primary'>\r\n                        <Description />\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip title='Позначити виконаним' arrow>\r\n                    <Button\r\n                        onClick={checkHandler}\r\n                        disableElevation\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        color='primary'>\r\n                        <CheckCircle />\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip title='Оновити' arrow>\r\n                    <Button\r\n                        disableElevation\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        color='primary'\r\n                        onClick={() => openModal('update')}>\r\n                        <Edit />\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip title='Видалити' arrow>\r\n                    <Button\r\n                        onClick={() => openModal('delete')}\r\n                        disableElevation\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        color='primary'>\r\n                        <Delete />\r\n                    </Button>\r\n                </Tooltip>\r\n            </TableCell>\r\n            <UpdateDialog open={update} setOpen={setUpdate} defect={defect} />\r\n            <InfoDialog open={info} setOpen={setInfo} defect={defect} />\r\n            <DeleteDialog open={del} setOpen={setDel} id={defect._id} />\r\n        </TableRow>\r\n    );\r\n}\r\n\r\nexport default DefectsTableRow;\r\n","import { telegramApiAxios } from '../../../common/utils/interceptor';\r\nimport { environment } from '../../../environments/environment';\r\nimport { GetDefects, Defect } from './DefectsModels';\r\n\r\nexport async function getDefects(): Promise<GetDefects> {\r\n    return await telegramApiAxios.get(`${environment.BASEURL}defect/all`).then((res) => {\r\n        return res.data;\r\n    });\r\n}\r\nexport async function editDefect(id: string | undefined, body: Defect): Promise<any> {\r\n    return await telegramApiAxios\r\n        .patch(`${environment.BASEURL}defect/update/${id}`, body)\r\n        .then((res) => res.data);\r\n}\r\nexport async function deleteDefect(id: string): Promise<GetDefects> {\r\n    return await telegramApiAxios\r\n        .delete(`${environment.BASEURL}defect/delete/${id}`)\r\n        .then((res) => res.data);\r\n}\r\n\r\nexport function updateModeSubmit(\r\n    data: any,\r\n    admin_username,\r\n    setSnack: any,\r\n    setDataSource: any,\r\n    closeModal: any,\r\n): void {\r\n    if (\r\n        data.values.title === data.intialFormValues.title &&\r\n        data.values.room === data.intialFormValues.room &&\r\n        data.values.status === data.intialFormValues.status &&\r\n        data.values.open_date === data.intialFormValues.open_date &&\r\n        data.values.priority === data.intialFormValues.priority\r\n    ) {\r\n        setSnack({\r\n            open: true,\r\n            message: 'Потрібно щось змінити',\r\n            type: 'info',\r\n        });\r\n    } else {\r\n        const updatedData: Defect = {\r\n            ...data.values,\r\n            open_date: new Date(data.values.open_date).toISOString().substr(0, 10),\r\n            admin_username,\r\n        };\r\n        editDefect(data.id, updatedData)\r\n            .then((res) => {\r\n                if (res.response === 'ok') {\r\n                    setDataSource((prevVal) =>\r\n                        prevVal.map((item) =>\r\n                            item._id === data.id ? (item = { _id: data.id, ...data.values }) : item,\r\n                        ),\r\n                    );\r\n                    closeModal();\r\n                    setSnack({\r\n                        open: true,\r\n                        message: 'Дефект успішно оновлено',\r\n                        type: 'success',\r\n                    });\r\n                }\r\n            })\r\n            .catch((err) =>\r\n                setSnack({\r\n                    open: true,\r\n                    message: `На сервері сталась помилка - ${err}`,\r\n                    type: 'error',\r\n                }),\r\n            );\r\n    }\r\n}\r\nexport function deleteModeSubmit(\r\n    id: any,\r\n    setSnack: any,\r\n    setDataSource: any,\r\n    closeModal: any,\r\n): void {\r\n    deleteDefect(id)\r\n        .then((res) => {\r\n            if (res.response === 'ok') {\r\n                setDataSource((prevVal) => prevVal.filter((tableDefect) => tableDefect._id !== id));\r\n                closeModal();\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Дефект успішно видалено',\r\n                    type: 'success',\r\n                });\r\n            }\r\n        })\r\n        .catch((err) =>\r\n            setSnack({\r\n                open: true,\r\n                message: `На сервері сталась помилка - ${err}`,\r\n                type: 'error',\r\n            }),\r\n        );\r\n}\r\nexport function checkModeSumbit(data, admin_username, statusValue, setSnack, setDataSource): void {\r\n    const id = data._id;\r\n    const updatedData: Defect = {\r\n        ...data,\r\n        _id: id,\r\n        status: statusValue,\r\n        open_date: new Date(data.open_date).toISOString().substr(0, 10),\r\n        admin_username,\r\n    };\r\n    editDefect(id, updatedData)\r\n        .then((res) => {\r\n            if (res.response === 'ok') {\r\n                setDataSource((prevVal) =>\r\n                    prevVal.map((item) => (item._id === id ? (item = { ...res.defect }) : item)),\r\n                );\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Дефект виправлено',\r\n                    type: 'success',\r\n                });\r\n            }\r\n        })\r\n        .catch((err) =>\r\n            setSnack({\r\n                open: true,\r\n                message: `На сервері сталась помилка - ${err}`,\r\n                type: 'error',\r\n            }),\r\n        );\r\n}\r\nexport function FilterByPriority(filter, filteredArr, setDataSource, setFilteredDataSource): void {\r\n    switch (filter) {\r\n        case 0:\r\n            getDefects().then((res) => {\r\n                setDataSource(res.defects);\r\n                setFilteredDataSource(res.defects);\r\n            });\r\n            break;\r\n        case 1:\r\n            setDataSource(filteredArr.filter((item: any) => item.priority === filter));\r\n            break;\r\n        case 2:\r\n            setDataSource(filteredArr.filter((item: any) => item.priority === filter));\r\n            break;\r\n        case 3:\r\n            setDataSource(filteredArr.filter((item: any) => item.priority === filter));\r\n            break;\r\n        case 4:\r\n            setDataSource(filteredArr.filter((item: any) => item.priority === filter));\r\n            break;\r\n        default:\r\n            setDataSource(filteredArr);\r\n    }\r\n}\r\nexport function FilterByStatus(filter, filteredArr, setDataSource, setFilteredDataSource): void {\r\n    switch (filter) {\r\n        case 'all':\r\n            getDefects().then((res) => {\r\n                setDataSource(res.defects);\r\n                setFilteredDataSource(res.defects);\r\n            });\r\n            break;\r\n        case 'open':\r\n            setDataSource(filteredArr.filter((item: any) => item.status === filter));\r\n            break;\r\n        case 'fixing':\r\n            setDataSource(filteredArr.filter((item: any) => item.status === filter));\r\n            break;\r\n        case 'solved':\r\n            setDataSource(filteredArr.filter((item: any) => item.status === filter));\r\n            break;\r\n        default:\r\n            setDataSource(filteredArr);\r\n    }\r\n}\r\n","import { TableCellProps } from '@material-ui/core';\r\n\r\nexport interface User {\r\n    first_name: string;\r\n    last_name: string;\r\n    username: string;\r\n    enabled: boolean;\r\n}\r\n\r\nexport interface Defect {\r\n    _id?: string;\r\n    title: string;\r\n    room: string;\r\n    attachment: string;\r\n    user?: User;\r\n    status: string;\r\n    open_date: Date;\r\n}\r\n\r\nexport interface GetDefects {\r\n    response: string;\r\n    message: string;\r\n    defects: Array<Defect>;\r\n}\r\ninterface Columns {\r\n    id: string;\r\n    label: string;\r\n    minWidth?: string;\r\n    align?: TableCellProps['align'];\r\n}\r\ninterface StatusFilter {\r\n    title: string;\r\n    value: string;\r\n}\r\ninterface PriorityFilter {\r\n    title: string;\r\n    value: number;\r\n}\r\nexport const columns: Array<Columns> = [\r\n    { id: 'id', label: '№', minWidth: '10%' },\r\n    { id: 'title', label: 'Опис', minWidth: '40%' },\r\n    {\r\n        id: 'room',\r\n        label: 'Приміщенння',\r\n        minWidth: '15%',\r\n    },\r\n    {\r\n        id: 'status',\r\n        label: 'Статус',\r\n        minWidth: '20%',\r\n        align: 'center',\r\n    },\r\n    {\r\n        id: 'operations',\r\n        label: 'Операції',\r\n        minWidth: '15%',\r\n        align: 'center',\r\n    },\r\n];\r\n\r\nexport const statuses: Array<StatusFilter> = [\r\n    { title: 'Фільтр відсутній', value: 'all' },\r\n    { title: 'Відкриті дефекти', value: 'open' },\r\n    { title: 'Дефекти в процесі', value: 'fixing' },\r\n    { title: 'Закриті дефекти', value: 'solved' },\r\n];\r\nexport const priorities: Array<PriorityFilter> = [\r\n    { title: 'Фільтр відсутній', value: 0 },\r\n    { title: 'Терміново', value: 1 },\r\n    { title: 'Якнайшвидше', value: 2 },\r\n    { title: 'Звичайне завдання', value: 3 },\r\n    { title: 'Пріоритет відсутній', value: 4 },\r\n];\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TablePagination,\r\n    Paper,\r\n    Typography,\r\n    MenuItem,\r\n    Select,\r\n    InputLabel,\r\n    FormControl,\r\n    FormGroup,\r\n} from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { NotificationImportant } from '@material-ui/icons';\r\n\r\nimport SnackbarHandler from '../../../../common/components/Snackbar/snackbar';\r\nimport Loader from '../../../../common/components/Loader/Loader';\r\nimport DefectsTableRow from './DefectsTableRow';\r\n\r\nimport {\r\n    getDefects,\r\n    deleteModeSubmit,\r\n    updateModeSubmit,\r\n    checkModeSumbit,\r\n    FilterByStatus,\r\n    FilterByPriority,\r\n} from '../DefectsService';\r\nimport styles from './DefectsTable.module.css';\r\nimport { columns, statuses, priorities } from '../DefectsModels';\r\nimport DefectsContext from '../DefectsContext';\r\nimport UserContext from '../../../login/UserContext';\r\n\r\nfunction DefectsTable(): JSX.Element {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [admin_username, setAdminUserName] = useState(localStorage.getItem('admin_username'));\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: '' });\r\n    const [dataSource, setDataSource] = useState(Array);\r\n    const [FilteredDataSource, setFilteredDataSource] = useState(Array);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const [deleted, setDeleted] = React.useState({ status: false, id: '' });\r\n    const [updated, setUpdated] = React.useState({ status: false, data: {} });\r\n    const [status, setStatus] = React.useState({ status: false, data: {}, value: 'none' });\r\n    const [StatusFilter, setStatusFilter] = React.useState(statuses[0].value);\r\n    const [PriorityFilter, setPriorityFilter] = React.useState(priorities[0].value);\r\n\r\n    const closeModal = (): void => {\r\n        setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getDefects().then((res) => {\r\n            setLoaded(true);\r\n            setDataSource(res.defects);\r\n            setFilteredDataSource(res.defects);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (deleted.status) {\r\n            deleteModeSubmit(deleted.id, setSnack, setDataSource, closeModal);\r\n        }\r\n    }, [deleted]);\r\n\r\n    useEffect(() => {\r\n        if (updated.status) {\r\n            updateModeSubmit(updated.data, admin_username, setSnack, setDataSource, closeModal);\r\n        }\r\n    }, [updated]);\r\n\r\n    useEffect(() => {\r\n        if (status.status) {\r\n            checkModeSumbit(status.data, admin_username, status.value, setSnack, setDataSource);\r\n        }\r\n    }, [status]);\r\n\r\n    //Filters\r\n    useEffect(() => {\r\n        FilterByStatus(StatusFilter, FilteredDataSource, setDataSource, setFilteredDataSource);\r\n    }, [StatusFilter]);\r\n    useEffect(() => {\r\n        FilterByPriority(PriorityFilter, FilteredDataSource, setDataSource, setFilteredDataSource);\r\n    }, [PriorityFilter]);\r\n    //\r\n\r\n    const handleChangePage = (event, newPage): void => {\r\n        setPage(newPage);\r\n    };\r\n    const handleChangeRowsPerPage = (event): void => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n    const handleChangeStatusFilter = (event) => {\r\n        setStatusFilter(event.target.value);\r\n    };\r\n    const handleChangePriorityFilter = (event) => {\r\n        setPriorityFilter(event.target.value);\r\n    };\r\n    return (\r\n        <DefectsContext.Provider value={{ setDeleted, setUpdated }}>\r\n            {loaded ? (\r\n                <React.Fragment>\r\n                    <div className={styles.entityHeader}>\r\n                        <Typography\r\n                            component='h2'\r\n                            variant='h4'\r\n                            color='textPrimary'\r\n                            className={styles.entityHeaderTitle}>\r\n                            <NotificationImportant fontSize='large' />\r\n                            Список дефектів\r\n                        </Typography>\r\n                        <FormGroup row className={styles.formGroup}>\r\n                            <Typography style={{ color: 'rgba(111, 111, 111, 0.87)' }}>\r\n                                Виберіть один із фільтрів\r\n                            </Typography>\r\n                            <span style={{ width: '1px', margin: '0 1rem' }} />\r\n                            <FormControl className={styles.formControl}>\r\n                                <InputLabel id='status-filter'>Фільтри по статусу</InputLabel>\r\n                                <Select\r\n                                    labelId='status-filter'\r\n                                    id='status-filter-select'\r\n                                    value={StatusFilter}\r\n                                    onChange={handleChangeStatusFilter}>\r\n                                    {statuses.map((filter) => (\r\n                                        <MenuItem key={filter.value} value={filter.value}>\r\n                                            {filter.title}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className={styles.formControl}>\r\n                                <InputLabel id='status-filter'>Фільтри по пріоритету</InputLabel>\r\n                                <Select\r\n                                    labelId='status-filter'\r\n                                    id='status-filter-select'\r\n                                    value={PriorityFilter}\r\n                                    onChange={handleChangePriorityFilter}>\r\n                                    {priorities.map((filter) => (\r\n                                        <MenuItem key={filter.value} value={filter.value}>\r\n                                            {filter.title}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                    </div>\r\n                    <Paper elevation={6}>\r\n                        <TableContainer className={styles.entityTableContainer}>\r\n                            <Table stickyHeader className={styles.entityTable}>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {columns.map((column) => (\r\n                                            <TableCell\r\n                                                key={uuidv4()}\r\n                                                align={column.align}\r\n                                                style={{ minWidth: column.minWidth }}>\r\n                                                {column.label}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {dataSource\r\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                        .map((defect, index) => {\r\n                                            return (\r\n                                                <DefectsTableRow\r\n                                                    key={uuidv4()}\r\n                                                    index={index + 1}\r\n                                                    defect={defect}\r\n                                                    setStatus={setStatus}\r\n                                                />\r\n                                            );\r\n                                        })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 100]}\r\n                            labelRowsPerPage='К-сть рядків'\r\n                            component='div'\r\n                            count={dataSource.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n                    </Paper>\r\n                    <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n                </React.Fragment>\r\n            ) : (\r\n                <Loader />\r\n            )}\r\n        </DefectsContext.Provider>\r\n    );\r\n}\r\n\r\nexport default DefectsTable;\r\n","import DefectsTable from './table/DefectsTable';\r\nexport default DefectsTable;\r\n","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogActions, Button } from '@material-ui/core';\r\n\r\nimport styles from './DeleteDialog.module.css';\r\n\r\nfunction InfoDialog({ open, setOpen, setDeleted, id, title }): JSX.Element {\r\n    const closeModal = () => {\r\n        setOpen(false);\r\n    };\r\n    function deleteHandler() {\r\n        setDeleted(() => {\r\n            return {\r\n                status: true,\r\n                id: id,\r\n            };\r\n        });\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog open={open} onClose={closeModal} aria-labelledby='simple-dialog-title'>\r\n                <DialogTitle className={styles.entityTitle}>Видалити {title}?</DialogTitle>\r\n                <DialogActions className={styles.deleteModal}>\r\n                    <Button onClick={closeModal} color='primary'>\r\n                        Скасувати\r\n                    </Button>\r\n                    <Button\r\n                        onClick={deleteHandler}\r\n                        type='submit'\r\n                        disableElevation\r\n                        variant='contained'\r\n                        color='primary'>\r\n                        Підтвердити\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default InfoDialog;\r\n","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport styles from './UpdateDialog.module.css';\r\n\r\nconst useStyles = makeStyles({\r\n    DialogContent: {\r\n        '&:first-child': {\r\n            paddingTop: '0',\r\n        },\r\n    },\r\n    DialogActions: {\r\n        padding: '1rem',\r\n    },\r\n});\r\n\r\nfunction UpdateDialog({ open, setOpen, setUpdated, user }): JSX.Element {\r\n    const classes = useStyles();\r\n\r\n    const intialFormValues = {\r\n        first_name: user.first_name,\r\n        last_name: user.last_name === '' ? 'Прізвище відсутнє' : user.last_name,\r\n        enabled: user.enabled,\r\n        position: user.position,\r\n    };\r\n    const editValidationSchema = Yup.object().shape({\r\n        first_name: Yup.string().min(4, \"Надто коротке ім'я\").max(50, \"Надто довге ім'я\"),\r\n        last_name: Yup.string().min(4, 'Надто коротка назва').max(50, 'Надто довга назва'),\r\n        enabled: Yup.string(),\r\n        position: Yup.string(),\r\n    });\r\n\r\n    const closeModal = () => {\r\n        setOpen(false);\r\n    };\r\n    const submit = (values) => {\r\n        setUpdated({\r\n            status: true,\r\n            data: {\r\n                id: user._id,\r\n                values: { username: user.username, chat_id: user.chat_id, ...values },\r\n                intialFormValues: { ...intialFormValues },\r\n            },\r\n        });\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog open={open} onClose={closeModal} aria-labelledby='simple-dialog-title'>\r\n                <DialogTitle className={styles.entityTitle}>Редагувати дефект</DialogTitle>\r\n                <Formik\r\n                    initialValues={intialFormValues}\r\n                    validationSchema={editValidationSchema}\r\n                    onSubmit={(values) => submit(values)}>\r\n                    {({\r\n                        isValid,\r\n                        values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                    }) => (\r\n                        <form className={styles.form} onSubmit={handleSubmit}>\r\n                            <DialogContent className={classes.DialogContent}>\r\n                                <TextField\r\n                                    autoFocus\r\n                                    margin='dense'\r\n                                    id='title'\r\n                                    name='first_name'\r\n                                    label=\"Ім'я\"\r\n                                    fullWidth\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.first_name}\r\n                                    helperText={touched.first_name ? errors.first_name : ''}\r\n                                    error={touched.first_name && Boolean(errors.first_name)}\r\n                                />\r\n                                <TextField\r\n                                    margin='dense'\r\n                                    id='last_name'\r\n                                    label='Прізвище'\r\n                                    fullWidth\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.last_name}\r\n                                    helperText={touched.last_name ? errors.last_name : ''}\r\n                                    error={touched.last_name && Boolean(errors.last_name)}\r\n                                />\r\n                                <FormControl fullWidth margin='dense'>\r\n                                    <InputLabel id='status-label'>Доступ</InputLabel>\r\n                                    <Select\r\n                                        labelId='enabled-label'\r\n                                        id='enabled'\r\n                                        name='enabled'\r\n                                        value={values.enabled}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}>\r\n                                        <MenuItem value={'true'}>Активний</MenuItem>\r\n                                        <MenuItem value={'false'}>Неактивний</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                {errors.enabled && touched.enabled ? (\r\n                                    <div>{errors.enabled}</div>\r\n                                ) : null}\r\n                                <FormControl fullWidth margin='dense'>\r\n                                    <InputLabel id='status-label'>Посада</InputLabel>\r\n                                    <Select\r\n                                        labelId='position-label'\r\n                                        id='position'\r\n                                        name='position'\r\n                                        value={values.position}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}>\r\n                                        <MenuItem value={'Cleaner'}>Санітарний працівник</MenuItem>\r\n                                        <MenuItem value={'Repairer'}>Технічний працівник</MenuItem>\r\n                                        <MenuItem value={'None'}>Посада відсутня</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                {errors.position && touched.position ? (\r\n                                    <div>{errors.position}</div>\r\n                                ) : null}\r\n                            </DialogContent>\r\n                            <DialogActions className={classes.DialogActions}>\r\n                                <Button onClick={closeModal}>Скасувати</Button>\r\n                                <Button\r\n                                    type='submit'\r\n                                    disabled={!isValid}\r\n                                    disableElevation\r\n                                    variant='contained'\r\n                                    color='primary'>\r\n                                    Зберегти\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default UpdateDialog;\r\n","import { telegramApiAxios } from '../../../common/utils/interceptor';\r\nimport { environment } from '../../../environments/environment';\r\nimport { GetUsers, User } from './UsersModels';\r\n\r\nexport async function getUsers(): Promise<GetUsers> {\r\n    return await telegramApiAxios.get(`${environment.BASEURL}user/all`).then((res) => {\r\n        return res.data;\r\n    });\r\n}\r\nexport async function editUser(id: string | undefined, body: User): Promise<any> {\r\n    return await telegramApiAxios\r\n        .patch(`${environment.BASEURL}user/update/${id}`, body)\r\n        .then((res) => res.data);\r\n}\r\nexport async function deleteUser(id: string): Promise<GetUsers> {\r\n    return await telegramApiAxios\r\n        .delete(`${environment.BASEURL}user/delete/${id}`)\r\n        .then((res) => res.data);\r\n}\r\n\r\nexport function updateModeSubmit(\r\n    data: any,\r\n    setSnack: any,\r\n    setDataSource: any,\r\n    closeModal: any,\r\n): void {\r\n    if (\r\n        data.values.first_name === data.intialFormValues.first_name &&\r\n        data.values.last_name === data.intialFormValues.last_name &&\r\n        data.values.enabled === data.intialFormValues.enabled &&\r\n        data.values.position === data.intialFormValues.position\r\n    ) {\r\n        setSnack({\r\n            open: true,\r\n            message: 'Потрібно щось змінити',\r\n            type: 'info',\r\n        });\r\n    } else {\r\n        const updatedData: User = {\r\n            ...data.values,\r\n        };\r\n        editUser(data.id, updatedData)\r\n            .then((res) => {\r\n                console.log(res);\r\n                if (res.response === 'ok') {\r\n                    setDataSource((prevVal) =>\r\n                        prevVal.map((item) =>\r\n                            item._id === data.id ? (item = { _id: data.id, ...data.values }) : item,\r\n                        ),\r\n                    );\r\n                    closeModal();\r\n                    setSnack({\r\n                        open: true,\r\n                        message: 'Користувача успішно оновлено',\r\n                        type: 'success',\r\n                    });\r\n                }\r\n            })\r\n            .catch((err) =>\r\n                setSnack({\r\n                    open: true,\r\n                    message: `На сервері сталась помилка - ${err}`,\r\n                    type: 'error',\r\n                }),\r\n            );\r\n    }\r\n}\r\nexport function deleteModeSubmit(\r\n    id: any,\r\n    setSnack: any,\r\n    setDataSource: any,\r\n    closeModal: any,\r\n): void {\r\n    deleteUser(id)\r\n        .then((res) => {\r\n            if (res.response === 'ok') {\r\n                setDataSource((prevVal) => prevVal.filter((tableDefect) => tableDefect._id !== id));\r\n                closeModal();\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Користувача успішно видалено',\r\n                    type: 'success',\r\n                });\r\n            }\r\n        })\r\n        .catch((err) =>\r\n            setSnack({\r\n                open: true,\r\n                message: `На сервері сталась помилка - ${err}`,\r\n                type: 'error',\r\n            }),\r\n        );\r\n}\r\nexport function checkModeSumbit(data, enabledValue, setSnack, setDataSource): void {\r\n    const id = data._id;\r\n    const updatedData: User = {\r\n        ...data,\r\n        enabled: enabledValue,\r\n    };\r\n    editUser(id, updatedData)\r\n        .then((res) => {\r\n            console.log(res);\r\n            if (res.response === 'ok') {\r\n                setDataSource((prevVal) =>\r\n                    prevVal.map((item) => (item._id === id ? (item = { ...res.user }) : item)),\r\n                );\r\n                setSnack({\r\n                    open: true,\r\n                    message: 'Доступ користувача активовано',\r\n                    type: 'success',\r\n                });\r\n            }\r\n        })\r\n        .catch((err) =>\r\n            setSnack({\r\n                open: true,\r\n                message: `На сервері сталась помилка - ${err}`,\r\n                type: 'error',\r\n            }),\r\n        );\r\n}\r\nexport function FilterByPosition(filter, filteredArr, setDataSource, setFilteredDataSource): void {\r\n    switch (filter) {\r\n        case 'No filter':\r\n            getUsers().then((res) => {\r\n                setDataSource(res.users);\r\n                setFilteredDataSource(res.users);\r\n            });\r\n            break;\r\n        case 'None':\r\n            setDataSource(filteredArr.filter((item: any) => item.position === filter));\r\n            break;\r\n        case 'Cleaner':\r\n            setDataSource(filteredArr.filter((item: any) => item.position === filter));\r\n            break;\r\n        case 'Repairer':\r\n            setDataSource(filteredArr.filter((item: any) => item.position === filter));\r\n            break;\r\n        default:\r\n            setDataSource(filteredArr);\r\n    }\r\n}\r\nexport function FilterByAccess(filter, filteredArr, setDataSource, setFilteredDataSource): void {\r\n    switch (filter) {\r\n        case 'No filter':\r\n            getUsers().then((res) => {\r\n                setDataSource(res.users);\r\n                setFilteredDataSource(res.users);\r\n            });\r\n            break;\r\n        case 'true':\r\n            setDataSource(filteredArr.filter((item: any) => item.enabled === true));\r\n            break;\r\n        case 'false':\r\n            setDataSource(filteredArr.filter((item: any) => item.enabled === false));\r\n            break;\r\n        default:\r\n            setDataSource(filteredArr);\r\n    }\r\n}\r\nexport function StylizePosition(position: string): string {\r\n    switch (position) {\r\n        case 'None':\r\n            return 'Посада відсутня';\r\n        case 'Cleaner':\r\n            return 'Сантіраний працівник';\r\n        case 'Repairer':\r\n            return 'Технічний працівник';\r\n        default:\r\n            return 'Посада відсутня';\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { TableCell, TableRow, Button, Tooltip } from '@material-ui/core';\r\nimport { Edit, Delete, CheckCircle } from '@material-ui/icons';\r\n\r\nimport styles from './UsersTable.module.css';\r\nimport DeleteDialog from '../../../../common/components/DeleteDialog/DeleteDialog';\r\nimport UpdateDialog from '../UpdateDialog/UpdateDialog';\r\nimport Status from '../../../../common/components/Status/Status';\r\nimport { StylizePosition } from '../UsersService';\r\n\r\nfunction DefectsTableRow({ user, index, setEnabled, setDeleted, setUpdated }): JSX.Element {\r\n    const [update, setUpdate] = React.useState(false);\r\n    const [del, setDel] = React.useState(false);\r\n    const position = StylizePosition(user.position);\r\n    const checkHandler = () => {\r\n        setEnabled({ status: true, data: { ...user }, value: true });\r\n    };\r\n\r\n    const openModal = (mode) => {\r\n        switch (mode) {\r\n            case 'update':\r\n                setUpdate(true);\r\n                break;\r\n            case 'delete':\r\n                setDel(true);\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableRow hover role='checkbox' tabIndex={-1}>\r\n            <TableCell>{index}</TableCell>\r\n            <TableCell>{user.username}</TableCell>\r\n            <TableCell>{user.first_name + ' ' + user.last_name}</TableCell>\r\n            <TableCell>{position}</TableCell>\r\n            <TableCell align='center'>\r\n                <Status status={user.enabled} />\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n                <Tooltip title='Активувати' arrow>\r\n                    <Button\r\n                        onClick={checkHandler}\r\n                        disableElevation\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        color='primary'>\r\n                        <CheckCircle />\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip title='Оновити' arrow>\r\n                    <Button\r\n                        disableElevation\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        color='primary'\r\n                        onClick={() => openModal('update')}>\r\n                        <Edit />\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip title='Видалити' arrow>\r\n                    <Button\r\n                        onClick={() => openModal('delete')}\r\n                        disableElevation\r\n                        variant='contained'\r\n                        className={styles.button}\r\n                        color='primary'>\r\n                        <Delete />\r\n                    </Button>\r\n                </Tooltip>\r\n            </TableCell>\r\n            <UpdateDialog open={update} setOpen={setUpdate} setUpdated={setUpdated} user={user} />\r\n            <DeleteDialog\r\n                title='користувача'\r\n                open={del}\r\n                setOpen={setDel}\r\n                id={user._id}\r\n                setDeleted={setDeleted}\r\n            />\r\n        </TableRow>\r\n    );\r\n}\r\n\r\nexport default DefectsTableRow;\r\n","import { TableCellProps } from '@material-ui/core';\r\n\r\nexport interface User {\r\n    first_name: string;\r\n    last_name: string;\r\n    username: string;\r\n    enabled: boolean;\r\n    position: string; // 'Cleaner' 'Repairer 'None'\r\n    chat_id: string;\r\n}\r\n\r\nexport interface GetUsers {\r\n    response: string;\r\n    message: string;\r\n    users: Array<User>;\r\n}\r\ninterface Columns {\r\n    id: string;\r\n    label: string;\r\n    minWidth?: string;\r\n    align?: TableCellProps['align'];\r\n}\r\ninterface AccessFilter {\r\n    title: string;\r\n    value: string;\r\n}\r\ninterface PositionFilter {\r\n    title: string;\r\n    value: string;\r\n}\r\nexport const columns: Array<Columns> = [\r\n    { id: 'id', label: '№', minWidth: '10%' },\r\n    {\r\n        id: 'login',\r\n        label: \"Унікальне ім'я в системі\",\r\n        minWidth: '25%',\r\n    },\r\n    { id: 'fullname', label: \"Повне ім'я\", minWidth: '30%' },\r\n    {\r\n        id: 'position',\r\n        label: 'Посада',\r\n        minWidth: '10%',\r\n    },\r\n    {\r\n        id: 'enabled',\r\n        label: 'Доступ',\r\n        minWidth: '15%',\r\n        align: 'center',\r\n    },\r\n    {\r\n        id: 'operations',\r\n        label: 'Операції',\r\n        minWidth: '10%',\r\n        align: 'center',\r\n    },\r\n];\r\n\r\nexport const accesses: Array<AccessFilter> = [\r\n    { title: 'Фільтр відсутній', value: 'No filter' },\r\n    { title: 'Неактивований', value: 'false' },\r\n    { title: 'Активований', value: 'true' },\r\n];\r\nexport const positions: Array<PositionFilter> = [\r\n    { title: 'Фільтр відсутній', value: 'No filter' },\r\n    { title: 'Посада відсутня', value: 'None' },\r\n    { title: 'Санітарний працівник', value: 'Cleaner' },\r\n    { title: 'Технічний працівник', value: 'Repairer' },\r\n];\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TablePagination,\r\n    Paper,\r\n    Typography,\r\n    MenuItem,\r\n    Select,\r\n    InputLabel,\r\n    FormControl,\r\n    FormGroup,\r\n} from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Group } from '@material-ui/icons';\r\n\r\nimport SnackbarHandler from '../../../../common/components/Snackbar/snackbar';\r\nimport Loader from '../../../../common/components/Loader/Loader';\r\nimport UsersTableRow from './UsersTableRow';\r\n\r\nimport styles from './UsersTable.module.css';\r\nimport {\r\n    getUsers,\r\n    deleteModeSubmit,\r\n    updateModeSubmit,\r\n    FilterByAccess,\r\n    FilterByPosition,\r\n    checkModeSumbit,\r\n} from '../UsersService';\r\nimport { columns, accesses, positions } from '../UsersModels';\r\n\r\nfunction UsersTable(): JSX.Element {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: '' });\r\n    const [dataSource, setDataSource] = useState(Array);\r\n    const [FilteredDataSource, setFilteredDataSource] = useState(Array);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const [deleted, setDeleted] = React.useState({ status: false, id: '' });\r\n    const [updated, setUpdated] = React.useState({ status: false, data: {} });\r\n    const [enabled, setEnabled] = React.useState({ status: false, data: {}, value: 'none' });\r\n    const [AccessFilter, setAccessFilter] = React.useState(accesses[0].value);\r\n    const [PositionFilter, setPositionFilter] = React.useState(positions[0].value);\r\n\r\n    const closeModal = (): void => {\r\n        setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getUsers().then((res) => {\r\n            setLoaded(true);\r\n            setDataSource(res.users);\r\n            setFilteredDataSource(res.users);\r\n        });\r\n    }, []);\r\n    //*Operations\r\n    useEffect(() => {\r\n        if (deleted.status) {\r\n            deleteModeSubmit(deleted.id, setSnack, setDataSource, closeModal);\r\n        }\r\n    }, [deleted]);\r\n\r\n    useEffect(() => {\r\n        if (updated.status) {\r\n            updateModeSubmit(updated.data, setSnack, setDataSource, closeModal);\r\n        }\r\n    }, [updated]);\r\n\r\n    useEffect(() => {\r\n        if (enabled.status) {\r\n            checkModeSumbit(enabled.data, enabled.value, setSnack, setDataSource);\r\n        }\r\n    }, [enabled]);\r\n\r\n    //*Filters\r\n    useEffect(() => {\r\n        FilterByAccess(AccessFilter, FilteredDataSource, setDataSource, setFilteredDataSource);\r\n    }, [AccessFilter]);\r\n    useEffect(() => {\r\n        FilterByPosition(PositionFilter, FilteredDataSource, setDataSource, setFilteredDataSource);\r\n    }, [PositionFilter]);\r\n\r\n    const handleChangePage = (event, newPage): void => {\r\n        setPage(newPage);\r\n    };\r\n    const handleChangeRowsPerPage = (event): void => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n    const handleChangeAccessFilter = (event) => {\r\n        setAccessFilter(event.target.value);\r\n    };\r\n    const handleChangePostionFilter = (event) => {\r\n        setPositionFilter(event.target.value);\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            {loaded ? (\r\n                <React.Fragment>\r\n                    <div className={styles.entityHeader}>\r\n                        <Typography\r\n                            component='h2'\r\n                            variant='h4'\r\n                            color='textPrimary'\r\n                            className={styles.entityHeaderTitle}>\r\n                            <Group fontSize='large' />\r\n                            Список користувачів\r\n                        </Typography>\r\n                        <FormGroup row className={styles.formGroup}>\r\n                            <Typography style={{ color: 'rgba(111, 111, 111, 0.87)' }}>\r\n                                Виберіть один із фільтрів\r\n                            </Typography>\r\n                            <span style={{ width: '1px', margin: '0 1rem' }} />\r\n                            <FormControl className={styles.formControl}>\r\n                                <InputLabel id='access-filter'>Фільтр доступу</InputLabel>\r\n                                <Select\r\n                                    labelId='access-filter'\r\n                                    id='access-filter-select'\r\n                                    value={AccessFilter}\r\n                                    onChange={handleChangeAccessFilter}>\r\n                                    {accesses.map((filter) => (\r\n                                        <MenuItem key={filter.value} value={filter.value}>\r\n                                            {filter.title}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className={styles.formControl}>\r\n                                <InputLabel id='position-filter'>Фільтри по посаді</InputLabel>\r\n                                <Select\r\n                                    labelId='position-filter'\r\n                                    id='position-filter-select'\r\n                                    value={PositionFilter}\r\n                                    onChange={handleChangePostionFilter}>\r\n                                    {positions.map((filter) => (\r\n                                        <MenuItem key={filter.value} value={filter.value}>\r\n                                            {filter.title}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                    </div>\r\n                    <Paper elevation={6}>\r\n                        <TableContainer className={styles.entityTableContainer}>\r\n                            <Table stickyHeader className={styles.entityTable}>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {columns.map((column) => (\r\n                                            <TableCell\r\n                                                key={uuidv4()}\r\n                                                align={column.align}\r\n                                                style={{ minWidth: column.minWidth }}>\r\n                                                {column.label}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {dataSource\r\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                        .map((user, index) => {\r\n                                            return (\r\n                                                <UsersTableRow\r\n                                                    key={uuidv4()}\r\n                                                    index={index + 1}\r\n                                                    user={user}\r\n                                                    setEnabled={setEnabled}\r\n                                                    setDeleted={setDeleted}\r\n                                                    setUpdated={setUpdated}\r\n                                                />\r\n                                            );\r\n                                        })}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[10, 25, 100]}\r\n                            labelRowsPerPage='К-сть рядків'\r\n                            component='div'\r\n                            count={dataSource.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n                    </Paper>\r\n                    <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n                </React.Fragment>\r\n            ) : (\r\n                <Loader />\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default UsersTable;\r\n","import UsersTable from './table/UsersTable';\r\nexport default UsersTable;\r\n","import { telegramApiAxios } from '../../../common/utils/interceptor';\r\nimport { environment } from '../../../environments/environment';\r\nimport { FilteredDefectNumbers } from './DashboardModels';\r\nimport { getDefects } from '../defects/DefectsService';\r\nimport { User } from '../users/UsersModels';\r\n\r\nexport async function getUserByName(username: string | null, setSnack): Promise<User> {\r\n    return await telegramApiAxios\r\n        .get(`${environment.BASEURL}user/getByUsername/${username}`)\r\n        .then((res) => {\r\n            if (res.status === 200) {\r\n                return res.data;\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            setSnack({\r\n                open: true,\r\n                message: `На сервері сталась помилка - ${err}`,\r\n                type: 'error',\r\n            });\r\n        });\r\n}\r\n\r\nexport async function getDefectsNumbers(setSnack): Promise<FilteredDefectNumbers> {\r\n    const AllDefectsArray = await getDefects().then((res) => res.defects);\r\n    if (AllDefectsArray.length <= 0) {\r\n        setSnack({\r\n            open: true,\r\n            message: `Дефекти відсутні`,\r\n            type: 'info',\r\n        });\r\n        return {\r\n            OpenDefectsCount: 0,\r\n            ProccessDefectsCount: 0,\r\n            ClosedDefectsCount: 0,\r\n        };\r\n    }\r\n    let OpenDefectsCount = 0;\r\n    let ProccessDefectsCount = 0;\r\n    let ClosedDefectsCount = 0;\r\n\r\n    for (let item of AllDefectsArray) {\r\n        switch (item.status) {\r\n            case 'open':\r\n                OpenDefectsCount++;\r\n                break;\r\n            case 'fixing':\r\n                ProccessDefectsCount++;\r\n                break;\r\n            case 'solved':\r\n                ClosedDefectsCount++;\r\n                break;\r\n        }\r\n    }\r\n    return {\r\n        OpenDefectsCount,\r\n        ProccessDefectsCount,\r\n        ClosedDefectsCount,\r\n    };\r\n}\r\n\r\nexport async function getDefectsByDateAndStatus(setSnack, status, date): Promise<any> {\r\n    return await telegramApiAxios\r\n        .get(`${environment.BASEURL}defect/getByDateAndStatus`, {\r\n            params: {\r\n                status,\r\n                date_type: 'open_date',\r\n                start: date,\r\n                end: new Date().toISOString().substr(0, 10),\r\n            },\r\n        })\r\n        .then((res) => {\r\n            return res.data.defects;\r\n        })\r\n        .catch((err) =>\r\n            setSnack({\r\n                open: true,\r\n                message: `На сервері сталась помилка - ${err}`,\r\n                type: 'error',\r\n            }),\r\n        );\r\n}\r\n\r\nexport async function getDefectsNumbersByDateAndStatus(setSnack, duration): Promise<any> {\r\n    let openDefects;\r\n    let processDefects;\r\n    let closedDefects;\r\n    const Today = new Date();\r\n    const Yesterday = new Date(Today.setDate(Today.getDate() - 1)).toISOString().substr(0, 10);\r\n    const LastWeek = new Date(Today.setDate(Today.getDate() - 7)).toISOString().substr(0, 10);\r\n    const LastMonth = new Date(Today.setDate(Today.getMonth() - 1)).toISOString().substr(0, 10);\r\n    switch (duration) {\r\n        case 'day':\r\n            openDefects = getDefectsByDateAndStatus(setSnack, 'open', Yesterday).then((res) => res);\r\n            processDefects = getDefectsByDateAndStatus(setSnack, 'fixing', Yesterday);\r\n            closedDefects = getDefectsByDateAndStatus(setSnack, 'solved', Yesterday);\r\n            break;\r\n        case 'week':\r\n            openDefects = getDefectsByDateAndStatus(setSnack, 'open', LastWeek).then((res) => res);\r\n            processDefects = getDefectsByDateAndStatus(setSnack, 'fixing', LastWeek).then(\r\n                (res) => res,\r\n            );\r\n            closedDefects = getDefectsByDateAndStatus(setSnack, 'solved', LastWeek).then(\r\n                (res) => res,\r\n            );\r\n            break;\r\n        case 'month':\r\n            openDefects = getDefectsByDateAndStatus(setSnack, 'open', LastMonth).then((res) => res);\r\n            processDefects = getDefectsByDateAndStatus(setSnack, 'fixing', LastMonth).then(\r\n                (res) => res,\r\n            );\r\n            closedDefects = getDefectsByDateAndStatus(setSnack, 'solved', LastMonth).then(\r\n                (res) => res,\r\n            );\r\n            break;\r\n    }\r\n    return await Promise.all([openDefects, processDefects, closedDefects]).then((res) => {\r\n        return {\r\n            OpenDefectsCount: res[0].length,\r\n            ProccessDefectsCount: res[1].length,\r\n            ClosedDefectsCount: res[2].length,\r\n        };\r\n    });\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Divider,\r\n    useTheme,\r\n    Typography,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport { ArrowRight } from '@material-ui/icons';\r\nimport { Bar, Doughnut } from 'react-chartjs-2';\r\n\r\nimport SnackbarHandler from '../../../common/components/Snackbar/snackbar';\r\nimport { getDefectsNumbers, getDefectsNumbersByDateAndStatus } from './DashboardService';\r\nimport {\r\n    DoughnutData,\r\n    DoughnutDataOptions,\r\n    BarData,\r\n    BarDataOptions,\r\n} from '../dashboard/DashboardModels';\r\n\r\nfunction Dashboard(): JSX.Element {\r\n    const theme = useTheme();\r\n    const [snack, setSnack] = useState({ open: false, message: '', type: '' });\r\n    const [doughnutData, setDoughnutData] = useState({ datasets: [], labels: [], apperiance: [] });\r\n    const [barData, setBarData] = useState({ datasets: [], labels: [], apperiance: [] } as any);\r\n    const [dataFilter, setDataFilter] = useState('day');\r\n\r\n    const doughnutOptions = DoughnutDataOptions(theme);\r\n    const barOptions = BarDataOptions(theme);\r\n\r\n    useEffect(() => {\r\n        getDefectsNumbers(setSnack).then((res) =>\r\n            setDoughnutData(\r\n                DoughnutData(\r\n                    res.OpenDefectsCount,\r\n                    res.ProccessDefectsCount,\r\n                    res.ClosedDefectsCount,\r\n                ),\r\n            ),\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getDefectsNumbersByDateAndStatus(setSnack, dataFilter).then((res) =>\r\n            setBarData(\r\n                BarData(res.OpenDefectsCount, res.ProccessDefectsCount, res.ClosedDefectsCount),\r\n            ),\r\n        );\r\n    }, [dataFilter]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container spacing={3}>\r\n                <Grid item lg={8} md={12} xl={9} xs={12}>\r\n                    <Card elevation={3}>\r\n                        <CardHeader\r\n                            action={\r\n                                <React.Fragment>\r\n                                    <Button\r\n                                        onClick={() => setDataFilter('day')}\r\n                                        size='small'\r\n                                        variant='outlined'>\r\n                                        За день\r\n                                    </Button>\r\n                                    <Button\r\n                                        onClick={() => setDataFilter('week')}\r\n                                        size='small'\r\n                                        variant='outlined'>\r\n                                        За тиждень\r\n                                    </Button>\r\n                                    <Button\r\n                                        onClick={() => setDataFilter('month')}\r\n                                        size='small'\r\n                                        variant='outlined'>\r\n                                        За місяць\r\n                                    </Button>\r\n                                </React.Fragment>\r\n                            }\r\n                            title='Статистика за певний час'\r\n                        />\r\n                        <Divider />\r\n                        <CardContent>\r\n                            <Box height={400} position='relative'>\r\n                                <Bar data={barData} options={barOptions} />\r\n                            </Box>\r\n                        </CardContent>\r\n                        <Divider />\r\n                        <Box display='flex' justifyContent='flex-end' p={2}>\r\n                            <Link to='/admin/defects'>\r\n                                <Button\r\n                                    color='primary'\r\n                                    endIcon={<ArrowRight />}\r\n                                    size='small'\r\n                                    variant='text'>\r\n                                    Перейти\r\n                                </Button>\r\n                            </Link>\r\n                        </Box>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item lg={4} md={6} xl={3} xs={12}>\r\n                    <Card>\r\n                        <CardHeader title='Поточна статистика дефектів' />\r\n                        <Divider />\r\n                        <CardContent>\r\n                            <Box height={300} position='relative'>\r\n                                <Doughnut data={doughnutData} options={doughnutOptions} />\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' mt={2}>\r\n                                {doughnutData.apperiance.map(({ color, icon, title, value }) => (\r\n                                    <Box key={title} p={1} textAlign='center'>\r\n                                        {icon}\r\n                                        <Typography color='textPrimary' variant='body1'>\r\n                                            {title}\r\n                                        </Typography>\r\n                                        <Typography style={{ color }} variant='h2'>\r\n                                            {value}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                ))}\r\n                            </Box>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n            <SnackbarHandler snack={snack} setSnack={setSnack} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n","/* eslint-disable react/display-name */\r\nimport React from 'react';\r\nimport { colors } from '@material-ui/core';\r\n\r\nimport { LockOpen, HourglassEmpty, DoneAll, TramRounded } from '@material-ui/icons';\r\n\r\nexport interface FilteredDefectNumbers {\r\n    OpenDefectsCount: number;\r\n    ProccessDefectsCount: number;\r\n    ClosedDefectsCount: number;\r\n}\r\n\r\nexport const BarDataOptions = (theme) => {\r\n    return {\r\n        animation: TramRounded,\r\n        cornerRadius: 20,\r\n        layout: { padding: 0 },\r\n        legend: { display: false },\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    barThickness: 100,\r\n                    maxBarThickness: 150,\r\n                    barPercentage: 1,\r\n                    categoryPercentage: 1,\r\n                    ticks: {\r\n                        fontColor: theme.palette.text.secondary,\r\n                    },\r\n                    gridLines: {\r\n                        display: false,\r\n                        drawBorder: false,\r\n                    },\r\n                },\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        fontColor: theme.palette.text.secondary,\r\n                        beginAtZero: true,\r\n                        min: 0,\r\n                    },\r\n                    gridLines: {\r\n                        borderDash: [2],\r\n                        borderDashOffset: [2],\r\n                        color: theme.palette.divider,\r\n                        drawBorder: false,\r\n                        zeroLineBorderDash: [2],\r\n                        zeroLineBorderDashOffset: [2],\r\n                        zeroLineColor: theme.palette.divider,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        tooltips: {\r\n            backgroundColor: theme.palette.background.default,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            borderColor: theme.palette.divider,\r\n            borderWidth: 1,\r\n            enabled: true,\r\n            footerFontColor: theme.palette.text.secondary,\r\n            intersect: false,\r\n            mode: 'index',\r\n            titleFontColor: theme.palette.text.primary,\r\n        },\r\n    };\r\n};\r\n\r\nexport const BarData = (open_defects: number, proccess_defects: number, closed_defects: number) => {\r\n    return {\r\n        datasets: [\r\n            {\r\n                data: [open_defects, proccess_defects, closed_defects],\r\n                backgroundColor: ['#4caf50', '#ff9800', '#e0e0e0'],\r\n            },\r\n        ],\r\n        labels: ['Відкриті', 'В процесі', 'Закриті'],\r\n    };\r\n};\r\n\r\nexport const DoughnutData = (\r\n    open_defects: number,\r\n    proccess_defects: number,\r\n    closed_defects: number,\r\n): any => {\r\n    return {\r\n        datasets: [\r\n            {\r\n                data: [+open_defects, +proccess_defects, +closed_defects],\r\n                backgroundColor: ['#4caf50', '#ff9800', '#e0e0e0'],\r\n                borderWidth: 8,\r\n                borderColor: colors.common.white,\r\n                hoverBorderColor: colors.common.white,\r\n            },\r\n        ],\r\n        labels: ['Відкриті', 'В процесі', 'Закриті'],\r\n        apperiance: [\r\n            {\r\n                title: 'Відкриті',\r\n                value: open_defects,\r\n                icon: <LockOpen />,\r\n                color: '#4caf50',\r\n            },\r\n            {\r\n                title: 'В процесі',\r\n                value: proccess_defects,\r\n                icon: <HourglassEmpty />,\r\n                color: '#ff9800',\r\n            },\r\n            {\r\n                title: 'Закриті',\r\n                value: closed_defects,\r\n                icon: <DoneAll />,\r\n                color: '#e0e0e0',\r\n            },\r\n        ],\r\n    };\r\n};\r\n\r\nexport const DoughnutDataOptions = (theme): any => {\r\n    return {\r\n        animation: false,\r\n        cutoutPercentage: 80,\r\n        layout: { padding: 0 },\r\n        legend: {\r\n            display: false,\r\n        },\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        tooltips: {\r\n            backgroundColor: theme.palette.background.default,\r\n            bodyFontColor: theme.palette.text.secondary,\r\n            borderColor: theme.palette.divider,\r\n            borderWidth: 1,\r\n            enabled: true,\r\n            footerFontColor: theme.palette.text.secondary,\r\n            intersect: false,\r\n            mode: 'index',\r\n            titleFontColor: theme.palette.text.primary,\r\n        },\r\n    };\r\n};\r\n","import React from 'react';\r\nimport { Dashboard, Group, List, InsertChartSharp, SupervisedUserCircle } from '@material-ui/icons';\r\n\r\nexport const navList: any = [\r\n    {\r\n        path: '/admin/dashboard',\r\n        icon: <Dashboard />,\r\n        title: 'Головна',\r\n    },\r\n    {\r\n        path: '/admin/admins',\r\n        icon: <SupervisedUserCircle />,\r\n        title: 'Адміни',\r\n    },\r\n    {\r\n        path: '/admin/users',\r\n        icon: <Group />,\r\n        title: 'Користувачі',\r\n    },\r\n    {\r\n        path: '/admin/defects',\r\n        icon: <InsertChartSharp />,\r\n        title: 'Дефекти',\r\n    },\r\n    {\r\n        path: '/admin/orders',\r\n        icon: <List />,\r\n        title: 'Замовлення',\r\n    },\r\n];\r\n","import React, { useState } from 'react';\r\nimport { Route, Switch, Link } from 'react-router-dom';\r\nimport {\r\n    AppBar,\r\n    CssBaseline,\r\n    Drawer,\r\n    Hidden,\r\n    IconButton,\r\n    List,\r\n    Box,\r\n    Typography,\r\n    Avatar,\r\n    Divider,\r\n    Toolbar,\r\n    Button,\r\n    Badge,\r\n} from '@material-ui/core';\r\n\r\nimport { Menu, Close } from '@material-ui/icons';\r\nimport { makeStyles, useTheme, withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nimport { MainListItems } from './AdminNavItem';\r\nimport Admins from './admins';\r\nimport Orders from './orders';\r\nimport DefectsTable from './defects/index';\r\nimport UsersTable from './users/index';\r\nimport Dashboard from './dashboard/index';\r\nimport { navList } from './nav';\r\nimport { logOut } from '../../common/utils/api';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    closeMenuButton: {\r\n        marginRight: 'auto',\r\n        marginLeft: 0,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    itemText: {\r\n        fontSize: '1rem',\r\n    },\r\n    active: {\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        backgroundColor: theme.palette.primary.main,\r\n        '& svg': {\r\n            color: 'white',\r\n        },\r\n    },\r\n    avatar: {\r\n        height: '100px',\r\n        width: '100px',\r\n    },\r\n}));\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        badge: {\r\n            backgroundColor: '#44b700',\r\n            color: '#44b700',\r\n            boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n            '&::after': {\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                borderRadius: '50%',\r\n                animation: '$ripple 1.2s infinite ease-in-out',\r\n                border: '1px solid currentColor',\r\n                content: '\"\"',\r\n            },\r\n        },\r\n        '@keyframes ripple': {\r\n            '0%': {\r\n                transform: 'scale(.8)',\r\n                opacity: 1,\r\n            },\r\n            '100%': {\r\n                transform: 'scale(2.4)',\r\n                opacity: 0,\r\n            },\r\n        },\r\n    }),\r\n)(Badge);\r\n\r\nconst AdminPanel = ({ setAuthInfo }): JSX.Element => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [admin_username, setAdminUserName] = useState(localStorage.getItem('admin_username'));\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n    function handleDrawerToggle() {\r\n        setMobileOpen(!mobileOpen);\r\n    }\r\n    const logoutHandler = async () => {\r\n        logOut();\r\n        setAuthInfo(false);\r\n    };\r\n    const drawer = (\r\n        <div>\r\n            <List>\r\n                {navList.map(({ path, icon, title }, index) => (\r\n                    <MainListItems key={index + title} path={path} icon={icon} title={title} />\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position='fixed' className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color='inherit'\r\n                        aria-label='Open drawer'\r\n                        edge='start'\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant='h6' className={classes.title}>\r\n                        Digichlist\r\n                    </Typography>\r\n                    <Button color='inherit' onClick={logoutHandler}>\r\n                        Logout\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <nav className={classes.drawer}>\r\n                <Hidden smUp implementation='css'>\r\n                    <Drawer\r\n                        variant='temporary'\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true,\r\n                        }}>\r\n                        <IconButton\r\n                            onClick={handleDrawerToggle}\r\n                            className={classes.closeMenuButton}>\r\n                            <Close />\r\n                        </IconButton>\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation='css'>\r\n                    <Drawer\r\n                        className={classes.drawer}\r\n                        variant='permanent'\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}>\r\n                        <div className={classes.toolbar} />\r\n                        <Box alignItems='center' display='flex' flexDirection='column' p={2}>\r\n                            <StyledBadge\r\n                                color='secondary'\r\n                                overlap='circle'\r\n                                anchorOrigin={{\r\n                                    vertical: 'bottom',\r\n                                    horizontal: 'right',\r\n                                }}\r\n                                badgeContent=''>\r\n                                <Avatar\r\n                                    variant='circular'\r\n                                    component={Link}\r\n                                    to='/admin/admins'\r\n                                    className={classes.avatar}\r\n                                />\r\n                            </StyledBadge>\r\n                            <Typography\r\n                                // className={classes.name}\r\n                                color='textPrimary'\r\n                                variant='h5'>\r\n                                {admin_username}\r\n                            </Typography>\r\n                            <Typography color='textSecondary' variant='body2'>\r\n                                Адмін\r\n                            </Typography>\r\n                        </Box>\r\n                        <Divider />\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <div className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                <Switch>\r\n                    <Route path='/admin/dashboard' component={Dashboard} />\r\n                    <Route path='/admin/admins' component={Admins} />\r\n                    <Route path='/admin/defects' component={DefectsTable} />\r\n                    <Route path='/admin/users' component={UsersTable} />\r\n                    <Route path='/admin/orders' component={Orders} />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPanel;\r\n","import React from 'react';\r\nimport { Redirect, Route } from '../../../node_modules/react-router-dom';\r\nconst LoginRoute = ({ component: Component, path, authInfo, setAuthInfo }): JSX.Element => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (!authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/admin/dashboard',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default LoginRoute;\r\n","import React from 'react';\r\nimport { Redirect, Route } from '../../../node_modules/react-router-dom';\r\nconst ProtectedRoute = ({ component: Component, path, authInfo, setAuthInfo }) => {\r\n    return (\r\n        <Route\r\n            render={(props) => {\r\n                if (authInfo) {\r\n                    return <Component setAuthInfo={setAuthInfo} path={path} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/login',\r\n                                state: { from: props.location },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default ProtectedRoute;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Login from './features/login';\r\nimport AdminPanel from './features/admin/AdminPanel';\r\nimport LoginRoute from './common/guards/LoginRoute';\r\nimport { isLogged } from './common/utils/api';\r\n\r\nimport ProtectedRoute from './common/guards/ProtectedRoute';\r\nimport { Redirect, Route, Switch } from '../node_modules/react-router-dom';\r\nimport './App.css';\r\n\r\nfunction App(): JSX.Element {\r\n    const [authInfo, setAuthInfo] = useState(false);\r\n    useEffect(() => {\r\n        async function isAuth() {\r\n            const res = await isLogged();\r\n            setAuthInfo(res);\r\n        }\r\n        isAuth();\r\n    }, []);\r\n    return (\r\n        <Switch>\r\n            <Redirect path='/' to='/login' component={Login} exact />\r\n            <Redirect path='/admin' exact to='/admin/dashboard' />\r\n            <ProtectedRoute\r\n                authInfo={authInfo}\r\n                setAuthInfo={setAuthInfo}\r\n                path='/admin'\r\n                component={AdminPanel}\r\n            />\r\n            <LoginRoute\r\n                setAuthInfo={setAuthInfo}\r\n                authInfo={authInfo}\r\n                path='/login'\r\n                component={Login}\r\n            />\r\n            <Route path='*' component={() => <h1>404</h1>} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from '../node_modules/react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"groups\":\"Admins_groups__1u_Gl\",\"entityHeader\":\"Admins_entityHeader__13hQz\",\"MuiSelect-root\":\"Admins_MuiSelect-root__2EX9s\",\"entityHeaderTitle\":\"Admins_entityHeaderTitle__3Ydyn\",\"entityHeaderButton\":\"Admins_entityHeaderButton__2H8Lm\",\"loader\":\"Admins_loader__1Prsd\",\"MuiInput-formControl\":\"Admins_MuiInput-formControl__12Iyo\",\"button\":\"Admins_button__3Fsi5\"};"],"sourceRoot":""}